<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NPlot</name>
    </assembly>
    <members>
        <member name="T:NPlot.AdapterUtils">
            <summary>
            Encapsulates functionality relating to exposing data in various
            different data structures in a consistent way.
            </summary>
            <remarks>It would be more efficient to have iterator style access
            to the data, rather than index based, and Count.</remarks>
        </member>
        <member name="T:NPlot.AdapterUtils.IAxisSuggester">
            <summary>
            Interface for classes that can suggest an axis for data they contain.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.IAxisSuggester.Get">
            <summary>
            Calculates a suggested axis for the data contained by the implementing class.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.AxisSuggester_MultiColumns">
            <summary>
            Implements functionality for suggesting an axis suitable for charting 
            data in multiple columns of a DataRowCollection.
            </summary>
            <remarks>This is currently not used.</remarks>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_MultiColumns.#ctor(System.Data.DataRowCollection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rows">The DataRowCollection containing the data.</param>
            <param name="abscissaName">the column with this name is not considered</param>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_MultiColumns.Get">
            <summary>
            Calculates a suggested axis for the DataRowCollection data.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.AxisSuggester_IList">
            <summary>
            This class gets an axis suitable for plotting the data contained in an IList.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_IList.#ctor(System.Collections.IList)">
            <summary>
            Constructor. 
            </summary>
            <param name="data">the data we want to find a suitable axis for.</param>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_IList.Get">
            <summary>
            Calculates a suggested axis for the IList data.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.AxisSuggester_Null">
            <summary>
            This class is responsible for supplying a default axis via the IAxisSuggester interface.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_Null.Get">
            <summary>
            Returns a default axis.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.AxisSuggester_StartStep">
            <summary>
            This class gets an axis corresponding to a StartStep object. The data on
            the orthogonal axis is of course also needed to calculate this.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_StartStep.#ctor(NPlot.StartStep,System.Collections.IList)">
            <summary>
            Constructor
            </summary>
            <param name="axisOfInterest">StartStep object corresponding to axis of interest</param>
            <param name="otherAxisData">data of other axis (needed to get count value)</param>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_StartStep.Get">
            <summary>
            Calculates a suggested axis given the data specified in the constructor.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.AxisSuggester_Auto">
            <summary>
            Provides default axis if only data corresponding to orthogonal axis is provided.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_Auto.#ctor(System.Collections.IList)">
            <summary>
            Constructor
            </summary>
            <param name="ordinateData">Data corresponding to orthogonal axis.</param>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_Auto.Get">
            <summary>
            Calculates a suggested axis given the data specified in the constructor.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.AxisSuggester_RowAuto">
            <summary>
            Provides default axis if only data corresponding to orthogonal axis is provided.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_RowAuto.#ctor(System.Data.DataRowCollection)">
            <summary>
            Construbtor
            </summary>
            <param name="ordinateData">Data corresponding to orthogonal axis.</param>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_RowAuto.Get">
            <summary>
            Calculates a suggested axis given the data specified in the constructor.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.AxisSuggester_Rows">
            <summary>
            Provides axis for data in a given column of a DataRowCollection.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_Rows.#ctor(System.Data.DataRowCollection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rows">DataRowCollection containing the data to suggest axis for.</param>
            <param name="columnName">the column to get data.</param>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_Rows.Get">
            <summary>
            Calculates a suggested axis given the data specified in the constructor.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.AxisSuggester_DataView">
            <summary>
            Provides axis suggestion for data in a particular column of a DataView.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_DataView.#ctor(System.Data.DataView,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data">DataView that contains data to suggest axis for</param>
            <param name="columnName">the column of interest in the DataView</param>
        </member>
        <member name="M:NPlot.AdapterUtils.AxisSuggester_DataView.Get">
            <summary>
            Calculates a suggested axis given the data specified in the constructor.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.ICounter">
            <summary>
            Interface that enables a dataholding class to report how many data items it holds.
            </summary>
        </member>
        <member name="P:NPlot.AdapterUtils.ICounter.Count">
            <summary>
            Number of data items in container.
            </summary>
            <value>Number of data items in container.</value>
        </member>
        <member name="T:NPlot.AdapterUtils.Counter_IList">
            <summary>
            Class that provides the number of items in an IList via the ICounter interface.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.Counter_IList.#ctor(System.Collections.IList)">
            <summary>
            Constructor
            </summary>
            <param name="data">the IList data to provide count of</param>
        </member>
        <member name="P:NPlot.AdapterUtils.Counter_IList.Count">
            <summary>
            Number of data items in container.
            </summary>
            <value>Number of data items in container.</value>
        </member>
        <member name="T:NPlot.AdapterUtils.Counter_Null">
            <summary>
            Class that returns 0 via the ICounter interface.
            </summary>
        </member>
        <member name="P:NPlot.AdapterUtils.Counter_Null.Count">
            <summary>
            Number of data items in container.
            </summary>
            <value>Number of data items in container.</value>
        </member>
        <member name="T:NPlot.AdapterUtils.Counter_Rows">
            <summary>
            Class that provides the number of items in a DataRowCollection via the ICounter interface.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.Counter_Rows.#ctor(System.Data.DataRowCollection)">
            <summary>
            Constructor
            </summary>
            <param name="rows">the DataRowCollection data to provide count of number of rows of.</param>
        </member>
        <member name="P:NPlot.AdapterUtils.Counter_Rows.Count">
            <summary>
            Number of data items in container.
            </summary>
            <value>Number of data items in container.</value>
        </member>
        <member name="T:NPlot.AdapterUtils.Counter_DataView">
            <summary>
            Class that provides the number of items in a DataView via the ICounter interface.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.Counter_DataView.#ctor(System.Data.DataView)">
            <summary>
            Constructor
            </summary>
            <param name="dataView">the DataBiew data to provide count of number of rows of.</param>
        </member>
        <member name="P:NPlot.AdapterUtils.Counter_DataView.Count">
            <summary>
            Number of data items in container.
            </summary>
            <value>Number of data items in container.</value>
        </member>
        <member name="T:NPlot.AdapterUtils.IDataGetter">
            <summary>
            Interface for data holding classes that allows users to get the ith value.
            </summary>
            <remarks>
            TODO: should change this to GetNext() and Reset() for more generality.
            </remarks>
        </member>
        <member name="M:NPlot.AdapterUtils.IDataGetter.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.DataGetter_IList">
            <summary>
            Provides data in an IList via the IDataGetter interface.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.DataGetter_IList.#ctor(System.Collections.IList)">
            <summary>
            Constructor
            </summary>
            <param name="data">IList that contains the data</param>
        </member>
        <member name="M:NPlot.AdapterUtils.DataGetter_IList.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.DataGetter_DoublesArray">
            <summary>
            Provides data in an array of doubles via the IDataGetter interface.
            </summary>
            <remarks>
            A speed-up version of DataDetter_IList; no boxing/unboxing overhead.
            </remarks>
        </member>
        <member name="M:NPlot.AdapterUtils.DataGetter_DoublesArray.#ctor(System.Double[])">
            <summary>
            Constructor
            </summary>
            <param name="data">array of doubles that contains the data</param>
        </member>
        <member name="M:NPlot.AdapterUtils.DataGetter_DoublesArray.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.DataGetter_Null">
            <summary>
            Provides no data.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.DataGetter_Null.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.DataGetter_StartStep">
            <summary>
            Provides data points from a StartStep object via the IDataGetter interface.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.DataGetter_StartStep.#ctor(NPlot.StartStep)">
            <summary>
            Constructor
            </summary>
            <param name="data">StartStep to derive data from.</param>
        </member>
        <member name="M:NPlot.AdapterUtils.DataGetter_StartStep.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.DataGetter_Count">
            <summary>
            Provides the natural numbers (and 0) via the IDataGetter interface.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.DataGetter_Count.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.DataGetter_Rows">
            <summary>
            Provides data in a DataRowCollection via the IDataGetter interface.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.DataGetter_Rows.#ctor(System.Data.DataRowCollection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rows">DataRowCollection to get data from</param>
            <param name="columnName">Get data in this column</param>
        </member>
        <member name="M:NPlot.AdapterUtils.DataGetter_Rows.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.DataGetter_DataView">
            <summary>
            Provides data in a DataView via the IDataGetter interface.
            </summary>
        </member>
        <member name="M:NPlot.AdapterUtils.DataGetter_DataView.#ctor(System.Data.DataView,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data">DataView to get data from.</param>
            <param name="columnName">Get data in this column</param>
        </member>
        <member name="M:NPlot.AdapterUtils.DataGetter_DataView.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:NPlot.AdapterUtils.DataGetter_MultiRows">
            <summary>
            Gets data 
            </summary>
            <remarks>Note: Does not implement IDataGetter... Currently this class is not used.</remarks>
        </member>
        <member name="M:NPlot.AdapterUtils.DataGetter_MultiRows.#ctor(System.Data.DataRowCollection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rows">DataRowCollection to get data from.</param>
            <param name="omitThisColumn">don't get data from this column</param>
        </member>
        <member name="M:NPlot.AdapterUtils.DataGetter_MultiRows.PointAt(System.Int32,System.Int32)">
            <summary>
            Gets data at a given index, in the given series (column number).
            </summary>
            <param name="index">index in the series to get data for</param>
            <param name="seriesIndex">series number (column number) to get data for.</param>
            <returns>the required data point.</returns>
        </member>
        <member name="P:NPlot.AdapterUtils.DataGetter_MultiRows.Count">
            <summary>
            Number of data points
            </summary>
        </member>
        <member name="T:NPlot.ArrowItem">
            <summary>
            An Arrow IDrawable, with a text label that is automatically
            nicely positioned at the non-pointy end of the arrow. Future
            feature idea: have constructor that takes a dataset, and have
            the arrow know how to automatically set it's angle to avoid 
            the data.
            </summary>
        </member>
        <member name="T:NPlot.IDrawable">
            <summary>
            Defines a Draw method for drawing objects against an x and y
            Physical Axis.
            </summary>
        </member>
        <member name="M:NPlot.IDrawable.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draws this object against an x and y PhysicalAxis.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="xAxis">The physical x-axis to draw against.</param>
            <param name="yAxis">The physical y-axis to draw against.</param>
        </member>
        <member name="M:NPlot.ArrowItem.#ctor(NPlot.PointD)">
            <summary>
            Default constructor : 
            text = ""
            angle = 45 degrees anticlockwise from horizontal.
            </summary>
            <param name="position">The position the arrow points to.</param>
        </member>
        <member name="M:NPlot.ArrowItem.#ctor(NPlot.PointD,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="position">The position the arrow points to.</param>
            <param name="angle">angle of arrow with respect to x axis.</param>
        </member>
        <member name="M:NPlot.ArrowItem.#ctor(NPlot.PointD,System.Double,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="position">The position the arrow points to.</param>
            <param name="angle">angle of arrow with respect to x axis.</param>
            <param name="text">The text associated with the arrow.</param>
        </member>
        <member name="M:NPlot.ArrowItem.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draws the arrow on a plot surface.
            </summary>
            <param name="g">graphics surface on which to draw</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="P:NPlot.ArrowItem.Text">
            <summary>
            Text associated with the arrow.
            </summary>
        </member>
        <member name="P:NPlot.ArrowItem.Angle">
            <summary>
            Angle of arrow anti-clockwise to right horizontal in degrees.
            </summary>
            <remarks>The code relating to this property in the Draw method is
            a bit weird. Internally, all rotations are clockwise [this is by 
            accient, I wasn't concentrating when I was doing it and was half
            done before I realised]. The simplest way to make angle represent
            anti-clockwise rotation (as it is normal to do) is to make the 
            get and set methods negate the provided value.</remarks>
        </member>
        <member name="P:NPlot.ArrowItem.PhysicalLength">
            <summary>
            Physical length of the arrow. 
            </summary>
        </member>
        <member name="P:NPlot.ArrowItem.To">
            <summary>
            The point the arrow points to.
            </summary>
        </member>
        <member name="P:NPlot.ArrowItem.HeadSize">
            <summary>
            Size of the arrow head sides in pixels.
            </summary>
        </member>
        <member name="P:NPlot.ArrowItem.HeadAngle">
            <summary>
            angle between sides of arrow head in degrees
            </summary>
        </member>
        <member name="P:NPlot.ArrowItem.TextBrush">
            <summary>
            The brush used to draw the text associated with the arrow.
            </summary>
        </member>
        <member name="P:NPlot.ArrowItem.TextColor">
            <summary>
            Set the text to be drawn with a solid brush of this color.
            </summary>
        </member>
        <member name="P:NPlot.ArrowItem.ArrowColor">
            <summary>
            The color of the pen used to draw the arrow.
            </summary>
        </member>
        <member name="P:NPlot.ArrowItem.TextFont">
            <summary>
            The font used to draw the text associated with the arrow.
            </summary>
        </member>
        <member name="P:NPlot.ArrowItem.HeadOffset">
            <summary>
            Offset the whole arrow back in the arrow direction this many pixels from the point it's pointing to.
            </summary>
        </member>
        <member name="T:NPlot.AxesConstraint">
            <summary>
            Classes derived from this abstract base class define and can apply 
            some form of constraint to the positioning and length of one or more
            of the four axes of a PlotSurface2D.
            </summary>
        </member>
        <member name="M:NPlot.AxesConstraint.ApplyConstraint(NPlot.PhysicalAxis,NPlot.PhysicalAxis,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Applies the constraint to the axes. Must be overriden.
            </summary>
            <param name="pXAxis1">The bottom x-axis.</param>
            <param name="pYAxis1">The left y-axis.</param>
            <param name="pXAxis2">The top x-axis.</param>
            <param name="pYAxis2">The right y-axis.</param>
        </member>
        <member name="T:NPlot.AxesConstraint.XPixelWorldLength">
            <summary>
            Defines an AxisConstraint that forces the world length corresponding
            to one pixel on the bottom x-axis to be a certain value. 
            
            TODO: Allow the pixel world length to be set for the top axis.
            </summary>
        </member>
        <member name="M:NPlot.AxesConstraint.XPixelWorldLength.#ctor(System.Double)">
            <summary>
            Constructor, which defines the world pixel length only. Both 
            y-axes will be moved by equal amounts in order to force this
            constraint.
            </summary>
            <param name="p">The world pixel length</param>
        </member>
        <member name="M:NPlot.AxesConstraint.XPixelWorldLength.#ctor(System.Double,NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Constructor, which defines the world pixel length together with
            the y-axis that should be held constant when forcing this 
            constraint [the other y-axis only will be moved].
            </summary>
            <param name="p">The world pixel length</param>
            <param name="holdFixedY">The position of this y-axis will be 
            held constant. The other y-axis will be moved in order to 
            force the constraint.</param>
        </member>
        <member name="M:NPlot.AxesConstraint.XPixelWorldLength.ApplyConstraint(NPlot.PhysicalAxis,NPlot.PhysicalAxis,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Applies the constraint to the axes.
            </summary>
            <param name="pXAxis1">The bottom x-axis.</param>
            <param name="pYAxis1">The left y-axis.</param>
            <param name="pXAxis2">The top x-axis.</param>
            <param name="pYAxis2">The right y-axis.</param>
        </member>
        <member name="T:NPlot.AxesConstraint.YPixelWorldLength">
            <summary>
            Defines an AxisConstraint that forces the world length corresponding
            to one pixel on the left y-axis to be a certain value. 
            
            TODO: Allow the pixel world length to be set for the right axis.
            </summary>
        </member>
        <member name="M:NPlot.AxesConstraint.YPixelWorldLength.#ctor(System.Double)">
            <summary>
            Constructor, which defines the world pixel length only. Both 
            x-axes will be moved by equal amounts in order to force this
            constraint.
            </summary>
            <param name="p">The world pixel length</param>
        </member>
        <member name="M:NPlot.AxesConstraint.YPixelWorldLength.#ctor(System.Double,NPlot.PlotSurface2D.XAxisPosition)">
            <summary>
            Constructor, which defines the world pixel length together with
            the x-axis that should be held constant when forcing this 
            constraint [the other x-axis only will be moved].
            </summary>
            <param name="p">The world pixel length</param>
            <param name="holdFixedX">The position of this x-axis will be held constant. The other x-axis will be moved in order to force the constraint.</param>
        </member>
        <member name="M:NPlot.AxesConstraint.YPixelWorldLength.ApplyConstraint(NPlot.PhysicalAxis,NPlot.PhysicalAxis,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Applies the constraint to the axes.
            </summary>
            <param name="pXAxis1">The bottom x-axis.</param>
            <param name="pYAxis1">The left y-axis.</param>
            <param name="pXAxis2">The top x-axis.</param>
            <param name="pYAxis2">The right y-axis.</param>
        </member>
        <member name="T:NPlot.AxesConstraint.AxisPosition">
            <summary>
            Defines an AxisConstraint that forces the specified axis to be placed at a 
            specific physical position. The position of the axis opposite is held 
            constant.
            </summary>
        </member>
        <member name="M:NPlot.AxesConstraint.AxisPosition.#ctor(NPlot.PlotSurface2D.XAxisPosition,System.Int32)">
            <summary>
            Constructor, which defines an horizontal axis and the physical
            y position it should be drawn at.
            </summary>
            <param name="axis">The x-axis for which the y position is to be specified.</param>
            <param name="yPosition">The [physical] y position of the axis.</param>
        </member>
        <member name="M:NPlot.AxesConstraint.AxisPosition.#ctor(NPlot.PlotSurface2D.YAxisPosition,System.Int32)">
            <summary>
            Constructor, which defines a vertical axis and the physical
            x position it should be drawn at.
            </summary>
            <param name="axis">The y-axis for which the x position is to be specified.</param>
            <param name="xPosition">The [physical] x position of the axis.</param>
        </member>
        <member name="M:NPlot.AxesConstraint.AxisPosition.ApplyConstraint(NPlot.PhysicalAxis,NPlot.PhysicalAxis,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Applies the constraint to the axes.
            </summary>
            <param name="pXAxis1">The bottom x-axis.</param>
            <param name="pYAxis1">The left y-axis.</param>
            <param name="pXAxis2">The top x-axis.</param>
            <param name="pYAxis2">The right y-axis.</param>
        </member>
        <member name="T:NPlot.AxesConstraint.AspectRatio">
            <summary>
            Defines an axes constraint that forces the world width and height pixel lengths
            to be at the provided ratio. For example, an aspect ratio of 3:2 or
            1.5 indicates that there should be 1.5 times as many pixels per fixed
            world length along the x direction than for the same world length along
            the y direction. In other words, the world length of one pixel along 
            the x direction is 2/3rds that of the world length of one pixel height
            in the y direction.
            </summary>
            <remarks>
            This class will never increase the size of the plot bounding box. It 
            will always be made smaller.
            </remarks>
        </member>
        <member name="M:NPlot.AxesConstraint.AspectRatio.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="a">Aspect Ratio</param>
        </member>
        <member name="M:NPlot.AxesConstraint.AspectRatio.#ctor(System.Double,NPlot.PlotSurface2D.XAxisPosition)">
            <summary>
            Constructor
            </summary>
            <param name="a">Aspect Ratio</param>
            <param name="holdFixedX">
            When adjusting the position of axes, the specified axis will never
            be moved.
            </param>
        </member>
        <member name="M:NPlot.AxesConstraint.AspectRatio.#ctor(System.Double,NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Constructor
            </summary>
            <param name="a">Aspect Ratio</param>
            <param name="holdFixedY">
            When adjusting the position of axes, the 
            specified axis will never be moved.
            </param>
        </member>
        <member name="M:NPlot.AxesConstraint.AspectRatio.#ctor(System.Double,NPlot.PlotSurface2D.XAxisPosition,NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Constructor
            </summary>
            <param name="a">Aspect Ratio</param>
            <param name="holdFixedX">When adjusting the position of axes, the specified axis will never be moved.</param>
            <param name="holdFixedY">When adjusting the position of axes, the specified axis will never be moved.</param>
        </member>
        <member name="M:NPlot.AxesConstraint.AspectRatio.ApplyConstraint(NPlot.PhysicalAxis,NPlot.PhysicalAxis,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Applies the constraint to the axes.
            </summary>
            <param name="pXAxis1">The bottom x-axis.</param>
            <param name="pYAxis1">The left y-axis.</param>
            <param name="pXAxis2">The top x-axis.</param>
            <param name="pYAxis2">The right y-axis.</param>
        </member>
        <member name="T:NPlot.Axis">
            <summary>
            Encapsulates functionality common to all axis classes. All specific
            axis classes derive from Axis. Axis can be used as a concrete class
            itself - it is an Axis without any embilishments [tick marks or tick
            mark labels].<br></br><br></br>
            This class encapsulates no physical information about where the axes
            are drawn. 
            </summary>
        </member>
        <member name="M:NPlot.Axis.Clone">
            <summary>
            Deep copy of Axis.
            </summary>
            <remarks>
            This method includes a check that guards against derived classes forgetting
            to implement their own Clone method. If Clone is called on a object derived
            from Axis, and the Clone method hasn't been overridden by that object, then
            the test this.GetType == typeof(Axis) will fail.
            </remarks>
            <returns>A copy of the Axis Class</returns>
        </member>
        <member name="M:NPlot.Axis.DoClone(NPlot.Axis,NPlot.Axis)">
            <summary>
            Helper method for Clone. Does all the copying - can be called by derived
            types so they don't need to implement this part of the copying themselves.
            also useful in constructor of derived types that takes Axis class.
            </summary>
        </member>
        <member name="M:NPlot.Axis.Init">
            <summary>
            Helper function for constructors.
            Do initialization here so that Clear() method is handled properly
            </summary>
        </member>
        <member name="M:NPlot.Axis.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NPlot.Axis.#ctor(System.Double,System.Double)">
            <summary>
            Constructor that takes only world min and max values.
            </summary>
            <param name="worldMin">The minimum world coordinate.</param>
            <param name="worldMax">The maximum world coordinate.</param>
        </member>
        <member name="M:NPlot.Axis.#ctor(NPlot.Axis)">
            <summary>
            Copy constructor.
            </summary>
            <param name="a">The Axis to clone.</param>
        </member>
        <member name="M:NPlot.Axis.OutOfRange(System.Double)">
            <summary>
            Determines whether a world value is outside range WorldMin -> WorldMax
            </summary>
            <param name="coord">the world value to test</param>
            <returns>true if outside limits, false otherwise</returns>
        </member>
        <member name="M:NPlot.Axis.LUB(NPlot.Axis)">
            <summary>
            Sets the world extent of the current axis to be just large enough
            to encompas the current world extent of the axis, and the world
            extent of the passed in axis
            </summary>
            <param name="a">The other Axis instance.</param>
        </member>
        <member name="M:NPlot.Axis.WorldToPhysical(System.Double,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            World to physical coordinate transform.
            </summary>
            <param name="coord">The coordinate value to transform.</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="clip">if false, then physical value may extend outside worldMin / worldMax. If true, the physical value returned will be clipped to physicalMin or physicalMax if it lies outside this range.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>Not sure how much time is spent in this often called function. If it's lots, then
            worth optimizing (there is scope to do so).</remarks>
        </member>
        <member name="M:NPlot.Axis.PhysicalToWorld(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            Return the world coordinate of the projection of the point p onto
            the axis.
            </summary>
            <param name="p">The point to project onto the axis</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="clip">If true, the world value will be clipped to WorldMin or WorldMax as appropriate if it lies outside this range.</param>
            <returns>The world value corresponding to the projection of the point p onto the axis.</returns>
        </member>
        <member name="M:NPlot.Axis.DrawLabel(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Draw the Axis Label
            </summary>
            <param name="g">The GDI+ drawing surface on which to draw.</param>
            <param name="offset">offset from axis. Should be calculated so as to make sure axis label misses tick labels.</param>
            <param name="axisPhysicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="axisPhysicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <returns>boxed Rectangle indicating bounding box of label. null if no label printed.</returns>
        </member>
        <member name="M:NPlot.Axis.DrawTick(System.Drawing.Graphics,System.Double,System.Single,System.String,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point@,System.Drawing.Rectangle@)">
            <summary>
            Draw a tick on the axis.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="w">The tick position in world coordinates.</param>
            <param name="size">The size of the tick (in pixels)</param>
            <param name="text">The text associated with the tick</param>
            <param name="textOffset">The Offset to draw from the auto calculated position</param>
            <param name="axisPhysMin">The minimum physical extent of the axis</param>
            <param name="axisPhysMax">The maximum physical extent of the axis</param>
            <param name="boundingBox">out: The bounding rectangle for the tick and tickLabel drawn</param>
            <param name="labelOffset">out: offset from the axies required for axis label</param>
        </member>
        <member name="M:NPlot.Axis.Draw(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Drawing.Rectangle@)">
            <summary>
            Draw the axis. This involves three steps:
             (1) Draw the axis line.
             (2) Draw the tick marks.
             (3) Draw the label.
            </summary>
            <param name="g">The drawing surface on which to draw.</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="boundingBox">out The bounding rectangle of the axis including axis line, label, tick marks and tick mark labels</param>
        </member>
        <member name="M:NPlot.Axis.UpdateOffsetAndBounds(System.Object@,System.Object@,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Update the bounding box and label offset associated with an axis
            to encompass the additionally specified mergeBoundingBox and 
            mergeLabelOffset respectively.
            </summary>
            <param name="labelOffset">Current axis label offset.</param>
            <param name="boundingBox">Current axis bounding box.</param>
            <param name="mergeLabelOffset">the label offset to merge. The current label offset will be replaced by this if it's norm is larger.</param>
            <param name="mergeBoundingBox">the bounding box to merge. The current bounding box will be replaced by this if null, or by the least upper bound of bother bounding boxes otherwise.</param>
        </member>
        <member name="M:NPlot.Axis.DrawTicks(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Object@,System.Object@)">
            <summary>
            DrawTicks method. In base axis class this does nothing.
            </summary>
            <param name="g">The graphics surface on which to draw</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="labelOffset">is set to a suitable offset from the axis to draw the axis label. In this base method, set to null.</param>
            <param name="boundingBox">is set to the smallest box that bounds the ticks and the tick text. In this base method, set to null.</param>
        </member>
        <member name="M:NPlot.Axis.WorldTickPositions_FirstPass(System.Drawing.Point,System.Drawing.Point,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the large ticks. 
            When the physical extent of the axis is small, some of the positions 
            that were generated in this pass may be converted to small tick 
            positions and returned as well.
            
            This default implementation returns empty large ticks list and null
            small tick list.
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
            <param name="smallTickPositions">ArrayList containing the positions of the small ticks if calculated, null otherwise.</param>
        </member>
        <member name="M:NPlot.Axis.WorldTickPositions_SecondPass(System.Drawing.Point,System.Drawing.Point,System.Collections.ArrayList,System.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the small ticks
            if they have not already been generated.
            
            This default implementation creates an empty smallTickPositions list 
            if it doesn't already exist.
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">The positions of the large ticks.</param>
            <param name="smallTickPositions">If null, small tick positions are returned via this parameter. Otherwise this function does nothing.</param>
        </member>
        <member name="M:NPlot.Axis.WorldTickPositions(System.Drawing.Point,System.Drawing.Point,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Determines the positions of all Large and Small ticks.
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
            <param name="smallTickPositions">ArrayList containing the positions of the small ticks.</param>
        </member>
        <member name="M:NPlot.Axis.IncreaseRange(System.Double)">
            <summary>
            Moves the world min and max values so that the world axis
            length is [percent] bigger. If the current world
            max and min values are the same, they are moved appart 
            an arbitrary amount. This arbitrary amount is currently
            0.01, and will probably be configurable in the future.
            </summary>
            <param name="percent">Percentage to increase world length by.</param>
            <remarks>Works for the case WorldMax is less than WorldMin.</remarks>
        </member>
        <member name="M:NPlot.Axis.getDefaultLabelOffset(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            returns a suitable offset for the axis label in the case that there are no
            ticks or tick text in the way.
            </summary>
            <param name="physicalMin">physical point corresponding to the axis world maximum.</param>
            <param name="physicalMax">physical point corresponding to the axis world minimum.</param>
            <returns>axis label offset</returns>
        </member>
        <member name="P:NPlot.Axis.TicksCrossAxis">
            <summary>
            If true, tick marks will cross the axis, with their centre on the axis line.
            If false, tick marks will be drawn as a line with origin starting on the axis line.
            </summary>
        </member>
        <member name="P:NPlot.Axis.WorldMax">
            <summary>
            The maximum world extent of the axis. Note that it is sensical if 
            WorldMax is less than WorldMin - the axis would just be descending
            not ascending. Currently Axes won't display properly if you do 
            this - use the Axis.Reversed property instead to achieve the same
            result.
            
            Setting this raises the WorldMinChanged event and the WorldExtentsChanged event.
            </summary>
        </member>
        <member name="P:NPlot.Axis.WorldMin">
            <summary>
            The minumum world extent of the axis. Note that it is sensical if 
            WorldMax is less than WorldMin - the axis would just be descending
            not ascending. Currently Axes won't display properly if you do 
            this - use the Axis.Reversed property instead to achieve the same
            result.
            
            Setting this raises the WorldMinChanged event and the WorldExtentsChanged event.
            </summary>
        </member>
        <member name="P:NPlot.Axis.LargeTickSize">
            <summary>
            Length (in pixels) of a large tick. <b>Not</b> the distance 
            between large ticks. The length of the tick itself.
            </summary>
        </member>
        <member name="P:NPlot.Axis.SmallTickSize">
            <summary>
            Length (in pixels) of the small ticks.
            </summary>
        </member>
        <member name="P:NPlot.Axis.Label">
            <summary>
            The Axis Label
            </summary>
        </member>
        <member name="P:NPlot.Axis.TickTextNextToAxis">
            <summary>
            If true, text associated with tick marks will be drawn on the other side of the
            axis line [next to the axis]. If false, tick mark text will be drawn at the end
            of the tick mark [on the same of the axis line as the tick].
            </summary>
        </member>
        <member name="P:NPlot.Axis.Hidden">
            <summary>
            If set to true, the axis is hidden. That is, the axis line, ticks, tick 
            labels and axis label will not be drawn. 
            </summary>
        </member>
        <member name="P:NPlot.Axis.Reversed">
            <summary>
            If set true, the axis will behave as though the WorldMin and WorldMax values
            have been swapped.
            </summary>
        </member>
        <member name="P:NPlot.Axis.HideTickText">
            <summary>
            If true, no text will be drawn next to any axis tick marks.
            </summary>
        </member>
        <member name="P:NPlot.Axis.TickTextFont">
            <summary>
            This font is used for the drawing of text next to the axis tick marks.
            </summary>
        </member>
        <member name="P:NPlot.Axis.LabelFont">
            <summary>
            This font is used to draw the axis label.
            </summary>
        </member>
        <member name="P:NPlot.Axis.NumberFormat">
            <summary>
            Specifies the format used for drawing tick labels. See 
            StringBuilder.AppendFormat for a description of this 
            string.
            </summary>
        </member>
        <member name="P:NPlot.Axis.MinPhysicalLargeTickStep">
            <summary>
            If LargeTickStep isn't specified, then this will be calculated 
            automatically. The calculated value will not be less than this
            amount.
            </summary>
        </member>
        <member name="P:NPlot.Axis.AxisColor">
            <summary>
            The color of the pen used to draw the ticks and the axis line.
            </summary>
        </member>
        <member name="P:NPlot.Axis.AxisPen">
            <summary>
            The pen used to draw the ticks and the axis line.
            </summary>
        </member>
        <member name="P:NPlot.Axis.TicksIndependentOfPhysicalExtent">
            <summary>
            If true, automated tick placement will be independent of the physical
            extent of the axis. Tick placement will look good for charts of typical
            size (say physical dimensions of 640x480). If you want to produce the
            same chart on two graphics surfaces of different sizes [eg Windows.Forms
            control and printer], then you will want to set this property to true.
            If false [default], the number of ticks and their placement will be 
            optimally calculated to look the best for the given axis extent. This 
            is very useful if you are creating a cart with particularly small or
            large physical dimensions.
            </summary>
        </member>
        <member name="P:NPlot.Axis.FlipTicksLabel">
            <summary>
            If true label is flipped about the text center line parallel to the text.
            </summary>
        </member>
        <member name="P:NPlot.Axis.TicksAngle">
            <summary>
            Angle to draw ticks at (measured anti-clockwise from axis direction).
            </summary>
        </member>
        <member name="P:NPlot.Axis.TicksLabelAngle">
            <summary>
            Angle to draw large tick labels at (clockwise from horizontal). Note: 
            this is currently only implemented well for the lower x-axis. 
            </summary>
        </member>
        <member name="P:NPlot.Axis.LabelColor">
            <summary>
            The color of the brush used to draw the axis label.
            </summary>
        </member>
        <member name="P:NPlot.Axis.LabelBrush">
            <summary>
            The brush used to draw the axis label.
            </summary>
        </member>
        <member name="P:NPlot.Axis.TickTextColor">
            <summary>
            The color of the brush used to draw the axis tick labels.
            </summary>
        </member>
        <member name="P:NPlot.Axis.TickTextBrush">
            <summary>
            The brush used to draw the tick text.
            </summary>
        </member>
        <member name="P:NPlot.Axis.AutoScaleText">
            <summary>
            If true, label and tick text will be scaled to match size
            of PlotSurface2D. If false, they won't be.
            </summary>
            <remarks>Could also be argued this belongs in PlotSurface2D</remarks>
        </member>
        <member name="P:NPlot.Axis.AutoScaleTicks">
            <summary>
            If true, tick lengths will be scaled to match size
            of PlotSurface2D. If false, they won't be.
            </summary>
            <remarks>Could also be argued this belongs in PlotSurface2D</remarks>
        </member>
        <member name="P:NPlot.Axis.WorldLength">
            <summary>
            World extent of the axis.
            </summary>
        </member>
        <member name="P:NPlot.Axis.FontScale">
            <summary>
            Scale label and tick fonts by this factor. Set by PlotSurface2D 
            Draw method.
            </summary>
        </member>
        <member name="P:NPlot.Axis.TickScale">
            <summary>
            Scale tick mark lengths by this factor. Set by PlotSurface2D
            Draw method.
            </summary>		
        </member>
        <member name="P:NPlot.Axis.IsLinear">
            <summary>
            Get whether or not this axis is linear.
            </summary>
        </member>
        <member name="P:NPlot.Axis.LabelOffset">
            <summary>
            If LabelOffsetAbsolute is false (default) then this is the offset 
            added to default axis label position. If LabelOffsetAbsolute is 
            true, then this is the absolute offset of the label from the axis.
            
            If positive, offset is further away from axis, if negative, towards
            the axis.
            </summary>
        </member>
        <member name="P:NPlot.Axis.LabelOffsetAbsolute">
            <summary>
            If true, the value specified by LabelOffset is the absolute distance
            away from the axis that the label is drawn. If false, the value 
            specified by LabelOffset is added to the pre-calculated value to 
            determine the axis label position.
            </summary>
            <value></value>
        </member>
        <member name="P:NPlot.Axis.LabelOffsetScaled">
            <summary>
            Whether or not the supplied LabelOffset should be scaled by 
            a factor as specified by FontScale.
            </summary>
        </member>
        <member name="P:NPlot.Axis.Color">
            <summary>
            Set the Axis color (sets all of axis line color, Tick text color, and label color).
            </summary>
        </member>
        <member name="T:NPlot.BarPlot">
            <summary>
            Draws 
            </summary>
        </member>
        <member name="T:NPlot.BasePlot">
            <summary>
            Supplies implementation of basic legend handling properties, and
            basic data specifying properties which are used by all plots.
            </summary>
            <remarks>If C# had multiple inheritance, the heirachy would be different.</remarks>
        </member>
        <member name="P:NPlot.BasePlot.Label">
            <summary>
            A label to associate with the plot - used in the legend.
            </summary>
        </member>
        <member name="P:NPlot.BasePlot.ShowInLegend">
            <summary>
            Whether or not to include an entry for this plot in the legend if it exists.
            </summary>
        </member>
        <member name="P:NPlot.BasePlot.DataSource">
            <summary>
            Gets or sets the source containing a list of values used to populate the plot object.
            </summary>
        </member>
        <member name="P:NPlot.BasePlot.DataMember">
            <summary>
            Gets or sets the specific data member in a multimember data source to get data from.
            </summary>
        </member>
        <member name="T:NPlot.IPlot">
            <summary>
            Defines the interface for objects that (a) can draw a representation of 
            themselves in the legend and (b) can recommend a good axis to draw themselves
            against.
            </summary>
        </member>
        <member name="M:NPlot.IPlot.DrawInLegend(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Method used to draw a representation of the plot in a legend.
            </summary>
        </member>
        <member name="M:NPlot.IPlot.SuggestXAxis">
            <summary>
            The method used to set the default abscissa axis.
            </summary>
        </member>
        <member name="M:NPlot.IPlot.SuggestYAxis">
            <summary>
            The method used to set the default ordinate axis.
            </summary>
        </member>
        <member name="M:NPlot.IPlot.WriteData(System.Text.StringBuilder,NPlot.RectangleD,System.Boolean)">
            <summary>
            Write data associated with the plot as text.
            </summary>
            <param name="sb">the string builder to write to.</param>
            <param name="region">Only write out data in this region if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, only data in region is written, else all data is written.</param>
        </member>
        <member name="P:NPlot.IPlot.Label">
            <summary>
            The label associated with the plot [used in legend]
            </summary>
        </member>
        <member name="P:NPlot.IPlot.ShowInLegend">
            <summary>
            Whether or not to include an entry for this plot in the legend if it exists.
            </summary>
        </member>
        <member name="M:NPlot.BarPlot.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:NPlot.BarPlot.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draws the line plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="M:NPlot.BarPlot.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:NPlot.BarPlot.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:NPlot.BarPlot.DrawInLegend(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a representation of this plot in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="M:NPlot.BarPlot.WriteData(System.Text.StringBuilder,NPlot.RectangleD,System.Boolean)">
            <summary>
            Write data associated with the plot as text.
            </summary>
            <param name="sb">the string builder to write to.</param>
            <param name="region">Only write out data in this region if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, only data in region is written, else all data is written.</param>
            <remarks>TODO: not implemented.</remarks>
        </member>
        <member name="P:NPlot.BarPlot.OrdinateDataTop">
            <summary>
            Gets or sets the data, or column name for the ordinate [y] axis.
            </summary>
        </member>
        <member name="P:NPlot.BarPlot.OrdinateDataBottom">
            <summary>
            Gets or sets the data, or column name for the ordinate [y] axis.
            </summary>
        </member>
        <member name="P:NPlot.BarPlot.AbscissaData">
            <summary>
            Gets or sets the data, or column name for the abscissa [x] axis.
            </summary>
        </member>
        <member name="P:NPlot.BarPlot.BorderPen">
            <summary>
            The pen used to draw the plot
            </summary>
        </member>
        <member name="P:NPlot.BarPlot.BorderColor">
            <summary>
            The color of the pen used to draw lines in this plot.
            </summary>
        </member>
        <member name="P:NPlot.BarPlot.FillBrush">
            <summary>
            Set/Get the fill brush
            </summary>
        </member>
        <member name="P:NPlot.BarPlot.BarWidth">
            <summary>
            Set/Get the width of the bar in physical pixels.
            </summary>
        </member>
        <member name="T:NPlot.BaseSequencePlot">
            <summary>
            Adds additional basic functionality to BasePlot that is common to all
            plots that implement the ISequencePlot interface.
            </summary>
            <remarks>If C# had multiple inheritance, the heirachy would be different. The way it is isn't very nice.</remarks>
        </member>
        <member name="T:NPlot.ISequencePlot">
            <summary>
            Defines an mix-in style interface for plots that use SequenceAdapter to interpret supplied data.
            </summary>
        </member>
        <member name="P:NPlot.ISequencePlot.DataSource">
            <summary>
            Gets or sets the source containing a list of values used to populate the plot object.
            </summary>
        </member>
        <member name="P:NPlot.ISequencePlot.DataMember">
            <summary>
            Gets or sets the specific data member in a multimember data source to get data from.
            </summary>
        </member>
        <member name="P:NPlot.ISequencePlot.AbscissaData">
            <summary>
            Gets or sets the data, or column name for the abscissa [x] axis.
            </summary>
        </member>
        <member name="P:NPlot.ISequencePlot.OrdinateData">
            <summary>
            Gets or sets the data, or column name for the ordinate [y] axis.
            </summary>
        </member>
        <member name="M:NPlot.BaseSequencePlot.WriteData(System.Text.StringBuilder,NPlot.RectangleD,System.Boolean)">
            <summary>
            Writes text data of the plot object to the supplied string builder. It is 
            possible to specify that only data in the specified range be written.
            </summary>
            <param name="sb">the StringBuilder object to write to.</param>
            <param name="region">a region used if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, only data enclosed in the provided region will be written.</param>
        </member>
        <member name="P:NPlot.BaseSequencePlot.OrdinateData">
            <summary>
            Gets or sets the data, or column name for the ordinate [y] axis.
            </summary>
        </member>
        <member name="P:NPlot.BaseSequencePlot.AbscissaData">
            <summary>
            Gets or sets the data, or column name for the abscissa [x] axis.
            </summary>
        </member>
        <member name="T:NPlot.Bitmap.PlotSurface2D">
            <summary>
            Wrapper around NPlot.PlotSurface2D that provides extra functionality
            specific to drawing to Bitmaps.
            </summary>
        </member>
        <member name="T:NPlot.IPlotSurface2D">
            <summary>
            Defines the PlotSurface2D interface - All specific PlotSurface2D classes
            that use PlotSurface2D for their underlying operations should implement
            this class.
            </summary>
        </member>
        <member name="M:NPlot.IPlotSurface2D.Add(NPlot.IDrawable,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:NPlot.IPlotSurface2D.Add(NPlot.IDrawable,NPlot.PlotSurface2D.XAxisPosition,NPlot.PlotSurface2D.YAxisPosition,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:NPlot.IPlotSurface2D.Add(NPlot.IDrawable)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
        </member>
        <member name="M:NPlot.IPlotSurface2D.Add(NPlot.IDrawable,NPlot.PlotSurface2D.XAxisPosition,NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xax">the x-axis to add the plot against.</param>
            <param name="yax">the y-axis to add the plot against.</param>
        </member>
        <member name="M:NPlot.IPlotSurface2D.Clear">
            <summary>
            Clears the PlotSurface2D.
            </summary>
        </member>
        <member name="M:NPlot.IPlotSurface2D.AddAxesConstraint(NPlot.AxesConstraint)">
            <summary>
            Add an axis constraint to the plot surface. Axis constraints can
            specify relative world-pixel scalings, absolute axis positions etc.
            </summary>
            <param name="c">The axis constraint to add.</param>
        </member>
        <member name="M:NPlot.IPlotSurface2D.Remove(NPlot.IDrawable,System.Boolean)">
            <summary>
            Remove a drawable object from the plot surface.
            </summary>
            <param name="p">the object to remove</param>
            <param name="updateAxes">whether or not to update the axes after removal.</param>
        </member>
        <member name="P:NPlot.IPlotSurface2D.Legend">
            <summary>
            Gets or Sets the legend to use with this plot surface.
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.LegendZOrder">
            <summary>
            Setting this value determines the order (relative to IDrawables added to the plot surface)
            that the legend is drawn.
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.Padding">
            <summary>
            The distance in pixels to leave between of the edge of the bounding rectangle
            supplied to the Draw method, and the markings that make up the plot.
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.PlotBackColor">
            <summary>
            A color used to paint the plot background. Mutually exclusive with PlotBackImage and PlotBackBrush
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.PlotBackImage">
            <summary>
            An imaged used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.PlotBackBrush">
            <summary>
            A Rectangle brush used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.Title">
            <summary>
            The plot surface title.
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.AutoScaleTitle">
            <summary>
            Whether or not the title will be scaled according to size of the plot 
            surface.
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.AutoScaleAutoGeneratedAxes">
            <summary>
            When plots are added to the plot surface, the axes they are attached to
            are immediately modified to reflect data of the plot. If 
            AutoScaleAutoGeneratedAxes is true when a plot is added, the axes will
            be turned in to auto scaling ones if they are not already [tick marks,
            tick text and label size scaled to size of plot surface]. If false,
            axes will not be autoscaling.
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.TitleColor">
            <summary>
            Sets the title to be drawn using a solid brush of this color.
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.TitleBrush">
            <summary>
            The brush used for drawing the title.
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.TitleFont">
            <summary>
            The plot title font.
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.SmoothingMode">
            <summary>
            Smoothing mode to use when drawing plots.
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.XAxis1">
            <summary>
            The bottom abscissa axis.
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.XAxis2">
            <summary>
            The top abscissa axis.
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.YAxis1">
            <summary>
            The left ordinate axis.
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.YAxis2">
            <summary>
            The right ordinate axis.
            </summary>
        </member>
        <member name="P:NPlot.IPlotSurface2D.Drawables">
            <summary>
            Gets an array list containing all drawables currently added to the PlotSurface2D.
            </summary>
        </member>
        <member name="M:NPlot.Bitmap.PlotSurface2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="width">width of the bitmap.</param>
            <param name="height">height of the bitmap.</param>
        </member>
        <member name="M:NPlot.Bitmap.PlotSurface2D.#ctor(System.Drawing.Bitmap)">
            <summary>
            Constructor.
            </summary>
            <param name="b">The Bitmap where the plot is to be rendered.</param>
        </member>
        <member name="M:NPlot.Bitmap.PlotSurface2D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Renders the plot.
            </summary>
            <param name="g">The graphics surface.</param>
            <param name="bounds">The rectangle storing the bounds for rendering.</param>
        </member>
        <member name="M:NPlot.Bitmap.PlotSurface2D.Clear">
            <summary>
            Clears the plot.
            </summary>
        </member>
        <member name="M:NPlot.Bitmap.PlotSurface2D.Add(NPlot.IDrawable)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
        </member>
        <member name="M:NPlot.Bitmap.PlotSurface2D.Add(NPlot.IDrawable,NPlot.PlotSurface2D.XAxisPosition,NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
        </member>
        <member name="M:NPlot.Bitmap.PlotSurface2D.Add(NPlot.IDrawable,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:NPlot.Bitmap.PlotSurface2D.Add(NPlot.IDrawable,NPlot.PlotSurface2D.XAxisPosition,NPlot.PlotSurface2D.YAxisPosition,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:NPlot.Bitmap.PlotSurface2D.ToStream(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Renders the bitmap to a MemoryStream. Useful for returning the bitmap from
            an ASP.NET page.
            </summary>
            <returns>The MemoryStream object.</returns>
        </member>
        <member name="M:NPlot.Bitmap.PlotSurface2D.Refresh">
            <summary>
            Refreshes (draws) the plot.
            </summary>
        </member>
        <member name="M:NPlot.Bitmap.PlotSurface2D.AddAxesConstraint(NPlot.AxesConstraint)">
            <summary>
            Add an axis constraint to the plot surface. Axis constraints can
            specify relative world-pixel scalings, absolute axis positions etc.
            </summary>
            <param name="c">The axis constraint to add.</param>
        </member>
        <member name="M:NPlot.Bitmap.PlotSurface2D.Remove(NPlot.IDrawable,System.Boolean)">
            <summary>
            Remove a drawable object from the plot surface.
            </summary>
            <param name="p">the drawable to remove</param>
            <param name="updateAxes">whether or not to update the axes after removing the idrawable.</param>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.Title">
            <summary>
            The plot surface title.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.TitleFont">
            <summary>
            The plot title font.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.Padding">
            <summary>
            The distance in pixels to leave between of the edge of the bounding rectangle
            supplied to the Draw method, and the markings that make up the plot.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.XAxis1">
            <summary>
            The bottom abscissa axis.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.YAxis1">
            <summary>
            The left ordinate axis.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.XAxis2">
            <summary>
            The top abscissa axis.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.YAxis2">
            <summary>
            The right ordinate axis.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.Legend">
            <summary>
            Gets or Sets the legend to use with this plot surface.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.LegendZOrder">
            <summary>
            Gets or Sets the legend z-order.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.PlotBackColor">
            <summary>
            A color used to paint the plot background. Mutually exclusive with PlotBackImage and PlotBackBrush
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.PlotBackImage">
            <summary>
            An imaged used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.PlotBackBrush">
            <summary>
            A Rectangle brush used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.SmoothingMode">
            <summary>
            Smoothing mode to use when drawing plots.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.Width">
            <summary>
            The bitmap width
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.Height">
            <summary>
            The bitmap height
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.Bitmap">
            <summary>
            The bitmap to use as the drawing surface.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.BackColor">
            <summary>
            The bitmap background color outside the bounds of the plot surface.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.AutoScaleTitle">
            <summary>
            Whether or not the title will be scaled according to size of the plot 
            surface.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.AutoScaleAutoGeneratedAxes">
            <summary>
            When plots are added to the plot surface, the axes they are attached to
            are immediately modified to reflect data of the plot. If 
            AutoScaleAutoGeneratedAxes is true when a plot is added, the axes will
            be turned in to auto scaling ones if they are not already [tick marks,
            tick text and label size scaled to size of plot surface]. If false,
            axes will not be autoscaling.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.TitleColor">
            <summary>
            Sets the title to be drawn using a solid brush of this color.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.TitleBrush">
            <summary>
            The brush used for drawing the title.
            </summary>
        </member>
        <member name="P:NPlot.Bitmap.PlotSurface2D.Drawables">
            <summary>
            Gets an array list containing all drawables currently added to the PlotSurface2D.
            </summary>
        </member>
        <member name="T:NPlot.PointOLHC">
            <summary>
            Encapsulates open, low, high and close values useful for specifying financial data
            over a time period, together with a [single] x-value indicating the time [period] the
            data corresponds to. 
            </summary>
        </member>
        <member name="M:NPlot.PointOLHC.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">value representing the time period that the financial values refer to</param>
            <param name="open">The value at open of time period.</param>
            <param name="low">The low value over the time period</param>
            <param name="high">The high value over the time period.</param>
            <param name="close">The value at close of time period.</param>
        </member>
        <member name="P:NPlot.PointOLHC.X">
            <summary>
            value representing the time period that the financial values apply to.
            </summary>
        </member>
        <member name="P:NPlot.PointOLHC.Open">
            <summary>
            The value at open of time period.
            </summary>
        </member>
        <member name="P:NPlot.PointOLHC.Close">
            <summary>
            The value at close of time period.
            </summary>
        </member>
        <member name="P:NPlot.PointOLHC.Low">
            <summary>
            Low value of the time period.
            </summary>
        </member>
        <member name="P:NPlot.PointOLHC.High">
            <summary>
            High value of the time period.
            </summary>
        </member>
        <member name="T:NPlot.CandlePlot">
            <summary>
            Encapsulates functionality for drawing finacial candle charts. 
            </summary>
        </member>
        <member name="F:NPlot.CandlePlot.AutoScaleStickWidth">
            <summary>
            If stick width is set equal to this value, the width will be 
            automatically scaled dependant on the space between sticks.
            </summary>
        </member>
        <member name="M:NPlot.CandlePlot.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NPlot.CandlePlot.CalculatePhysicalSeparation(NPlot.CandlePlot.CandleDataAdapter,NPlot.PhysicalAxis)">
            <summary>
            Calculates the physical (not world) separation between abscissa values.
            </summary>
            <param name="cd">Candle adapter containing data</param>
            <param name="xAxis">Physical x axis the data is plotted against.</param>
            <returns>physical separation between abscissa values.</returns>
        </member>
        <member name="M:NPlot.CandlePlot.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draws the candle plot on a GDI+ surface agains the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="M:NPlot.CandlePlot.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:NPlot.CandlePlot.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:NPlot.CandlePlot.DrawInLegend(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a representation of this plot in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="F:NPlot.CandlePlot.Style">
            <summary>
            Specifies the CandleStick style to use.
            </summary>
        </member>
        <member name="F:NPlot.CandlePlot.BullishColor">
            <summary>
            If CandlePlot.Style is Filled, then bullish open-close moves are displayed in this color.
            </summary>
        </member>
        <member name="F:NPlot.CandlePlot.BearishColor">
            <summary>
            If CandlePlot.Style is Filled, then bearish moves are displayed in this color.
            </summary>
        </member>
        <member name="M:NPlot.CandlePlot.WriteData(System.Text.StringBuilder,NPlot.RectangleD,System.Boolean)">
            <summary>
            Write data associated with the plot as text.
            </summary>
            <param name="sb">the string builder to write to.</param>
            <param name="region">Only write out data in this region if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, only data in region is written, else all data is written.</param>
            <remarks>TODO: not implemented.</remarks>
        </member>
        <member name="P:NPlot.CandlePlot.OpenData">
            <summary>
            Gets or sets the data, or column name for the open values.
            </summary>
        </member>
        <member name="P:NPlot.CandlePlot.LowData">
            <summary>
            Gets or sets the data, or column name for the interval low values.
            </summary>
        </member>
        <member name="P:NPlot.CandlePlot.HighData">
            <summary>
            Gets or sets the data, or column name for the interval high values.
            </summary>
        </member>
        <member name="P:NPlot.CandlePlot.CloseData">
            <summary>
            Gets or sets the data, or column name for the close values.
            </summary>
        </member>
        <member name="P:NPlot.CandlePlot.AbscissaData">
            <summary>
            Gets or sets the data, or column name for the abscissa [x] axis.
            </summary>
        </member>
        <member name="P:NPlot.CandlePlot.Color">
            <summary>
            Color of this plot [excluding interior of filled boxes if Style is fill]. To
            change the Bullish and Bearish colours in Filled mode, use the BullishColor
            and BearishColor properties.
            </summary>
        </member>
        <member name="P:NPlot.CandlePlot.StickWidth">
            <summary>
            Width of each stick in pixels. It is best if this is an odd number.
            </summary>
        </member>
        <member name="P:NPlot.CandlePlot.Centered">
            <summary>
            If true (default), bars will be centered on the abscissa times. 
            If false, bars will be drawn between the corresponding abscissa time
            and the next abscissa time. 
            </summary>
            <value></value>
        </member>
        <member name="T:NPlot.CandlePlot.CandleStyle">
            <summary>
            
            </summary>
        </member>
        <member name="M:NPlot.CandlePlot.CandleStyle.Create(NPlot.CandlePlot.CandleDataAdapter)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:NPlot.CandlePlot.Stick">
            <summary>
            
            </summary>
        </member>
        <member name="M:NPlot.CandlePlot.Stick.Create(NPlot.CandlePlot.CandleDataAdapter)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:NPlot.CandlePlot.CandleDataAdapter">
            <summary>
            This class is responsible for interpreting the various ways you can 
            specify data to CandlePlot objects
            </summary>
        </member>
        <member name="M:NPlot.CandlePlot.CandleDataAdapter.#ctor(System.Object,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="dataSource"></param>
            <param name="dataMember"></param>
            <param name="abscissaData"></param>
            <param name="openData"></param>
            <param name="lowData"></param>
            <param name="highData"></param>
            <param name="closeData"></param>
        </member>
        <member name="M:NPlot.CandlePlot.CandleDataAdapter.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing the data.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:NPlot.CandlePlot.CandleDataAdapter.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing the data.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="P:NPlot.CandlePlot.CandleDataAdapter.Item(System.Int32)">
            <summary>
            Gets the ith point in the candle adapter
            </summary>
            <param name="i">index of datapoint to get</param>
            <returns>the datapoint.</returns>
        </member>
        <member name="P:NPlot.CandlePlot.CandleDataAdapter.Count">
            <summary>
            The number of datapoints available via the candle adapter.
            </summary>
            <value>the number of datapoints available.</value>
        </member>
        <member name="T:NPlot.CandlePlot.Styles">
            <summary>
            Possible CandleStick styles.
            </summary>
        </member>
        <member name="F:NPlot.CandlePlot.Styles.Stick">
            <summary>
            Draw vertical line between low and high, tick on left for open and tick on right for close.
            </summary>
        </member>
        <member name="F:NPlot.CandlePlot.Styles.Filled">
            <summary>
            Draw vertical line between low and high and place on top of this a box with bottom
            and top determined by open and high values. The box is filled using the colors specified
            in BullishColor and BearishColor properties.
            </summary>
        </member>
        <member name="T:NPlot.DateTimeAxis">
            <summary>
            The DateTimeAxis class
            </summary>
        </member>
        <member name="M:NPlot.DateTimeAxis.Clone">
            <summary>
            Deep copy of DateTimeAxis.
            </summary>
            <returns>A copy of the DateTimeAxis Class.</returns>
        </member>
        <member name="M:NPlot.DateTimeAxis.DoClone(NPlot.DateTimeAxis,NPlot.DateTimeAxis)">
            <summary>
            Helper method for Clone.
            </summary>
            <param name="a">The original object to clone.</param>
            <param name="b">The cloned object.</param>
        </member>
        <member name="M:NPlot.DateTimeAxis.#ctor(NPlot.Axis)">
            <summary>
            Constructor
            </summary>
            <param name="a">Axis to construct from</param>
        </member>
        <member name="M:NPlot.DateTimeAxis.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:NPlot.DateTimeAxis.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="worldMin">World min of axis</param>
            <param name="worldMax">World max of axis</param>
        </member>
        <member name="M:NPlot.DateTimeAxis.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="worldMin">World min of axis</param>
            <param name="worldMax">World max of axis</param>
        </member>
        <member name="M:NPlot.DateTimeAxis.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="worldMin">World min of axis</param>
            <param name="worldMax">World max of axis</param>
        </member>
        <member name="M:NPlot.DateTimeAxis.DrawTicks(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Object@,System.Object@)">
            <summary>
            Draw the ticks.
            </summary>
            <param name="g">The drawing surface on which to draw.</param>
            <param name="physicalMin">The minimum physical extent of the axis.</param>
            <param name="physicalMax">The maximum physical extent of the axis.</param>
            <param name="boundingBox">out: smallest box that completely encompasses all of the ticks and tick labels.</param>
            <param name="labelOffset">out: a suitable offset from the axis to draw the axis label.</param>
        </member>
        <member name="M:NPlot.DateTimeAxis.LargeTickLabel(System.DateTime)">
            <summary>
            Get the label corresponding to the provided date time
            </summary>
            <param name="tickDate">the date time to get the label for</param>
            <returns>label for the provided DateTime</returns>
        </member>
        <member name="F:NPlot.DateTimeAxis.LargeTickLabelType_">
            <summary>
             this gets set after a get LargeTickPositions.
            </summary>
        </member>
        <member name="M:NPlot.DateTimeAxis.WorldTickPositions_FirstPass(System.Drawing.Point,System.Drawing.Point,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the large ticks. No
            small tick marks are currently calculated by this method.
            
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
            <param name="smallTickPositions">null</param>
        </member>
        <member name="M:NPlot.DateTimeAxis.WorldTickPositions_SecondPass(System.Drawing.Point,System.Drawing.Point,System.Collections.ArrayList,System.Collections.ArrayList@)">
            <summary>
            Compute the small tick positions for largetick size of one or more years.
             - inside the domain or the large tick positons, is take the mid-point of pairs of large ticks
             - outside the large tick range, check if a half tick is inside the world min/max
            This method works only if there are atleast 2 large ticks,
            since we don't know if its minutes, hours, month, or yearly divisor.
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">Read in the large tick positions</param>
            <param name="smallTickPositions">Fill in the corresponding small tick positions</param>
            <remarks>Added by Rosco Hill</remarks>
        </member>
        <member name="P:NPlot.DateTimeAxis.LargeTickStep">
            <summary>
            The distance between large ticks. If this is set to Zero [default],
            this distance will be calculated automatically.
            </summary>
        </member>
        <member name="T:NPlot.DateTimeAxis.LargeTickLabelType">
            <summary>
            Enumerates the different types of tick label possible.
            </summary>
        </member>
        <member name="F:NPlot.DateTimeAxis.LargeTickLabelType.none">
            <summary>
            default - no tick labels.
            </summary>
        </member>
        <member name="F:NPlot.DateTimeAxis.LargeTickLabelType.year">
            <summary>
            tick labels should be years
            </summary>
        </member>
        <member name="F:NPlot.DateTimeAxis.LargeTickLabelType.month">
            <summary>
            Tick labels should be month names
            </summary>
        </member>
        <member name="F:NPlot.DateTimeAxis.LargeTickLabelType.day">
            <summary>
            Tick labels should be day names
            </summary>
        </member>
        <member name="F:NPlot.DateTimeAxis.LargeTickLabelType.hourMinute">
            <summary>
            Tick labels should be hour / minutes.
            </summary>
        </member>
        <member name="F:NPlot.DateTimeAxis.LargeTickLabelType.hourMinuteSeconds">
            <summary>
            tick labels should be hour / minute / second.
            </summary>
        </member>
        <member name="T:NPlot.FilledRegion">
            <summary>
            A quick and dirty Filled region plottable object
            </summary>
        </member>
        <member name="M:NPlot.FilledRegion.#ctor(NPlot.LinePlot,NPlot.LinePlot)">
            <summary>
            Constructor
            </summary>
            <param name="lp1">LinePlot that provides bounds to filled region [upper or lower]</param>
            <param name="lp2">LinePlot that provides bounds to filled region [upper or lower]</param>
            <remarks>TODO: make this work with other plot types.</remarks>
        </member>
        <member name="M:NPlot.FilledRegion.#ctor(NPlot.VerticalLine,NPlot.VerticalLine)">
            <summary>
            Constructor
            </summary>
            <param name="l1">Vertical line to provide bounds for filled region</param>
            <param name="l2">The other Vertical line to provide bounds for filled region</param>
        </member>
        <member name="M:NPlot.FilledRegion.#ctor(NPlot.HorizontalLine,NPlot.HorizontalLine)">
            <summary>
            Constructor
            </summary>
            <param name="l1">Vertical line to provide bounds for filled region</param>
            <param name="l2">The other Vertical line to provide bounds for filled region</param>
        </member>
        <member name="M:NPlot.FilledRegion.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draw the filled region
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="P:NPlot.FilledRegion.Brush">
            <summary>
            Use this brush (and not a RectangleBrush) for drawing.
            </summary>
        </member>
        <member name="P:NPlot.FilledRegion.RectangleBrush">
            <summary>
            Use this RectangleBrush (and not a normal Brush) for drawing.
            </summary>
        </member>
        <member name="T:NPlot.Grid">
            <summary>
            Encapsulates a Grid IDrawable object. Instances of this  to a PlotSurface2D 
            instance to produce a grid.
            </summary>
        </member>
        <member name="M:NPlot.Grid.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NPlot.Grid.DrawGridLines(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis,System.Collections.ArrayList,System.Boolean,System.Drawing.Pen)">
            <summary>
            Does all the work in drawing grid lines.
            </summary>
            <param name="g">The graphics surface on which to render.</param>
            <param name="axis">TODO</param>
            <param name="orthogonalAxis">TODO</param>
            <param name="a">the list of world values to draw grid lines at.</param>
            <param name="horizontal">true if want horizontal lines, false otherwise.</param>
            <param name="p">the pen to use to draw the grid lines.</param>
        </member>
        <member name="M:NPlot.Grid.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draws the grid
            </summary>
            <param name="g">The graphics surface on which to draw</param>
            <param name="xAxis">The physical x axis to draw horizontal lines parallel to.</param>
            <param name="yAxis">The physical y axis to draw vertical lines parallel to.</param>
        </member>
        <member name="P:NPlot.Grid.HorizontalGridType">
            <summary>
            Specifies the horizontal grid type (none, coarse or fine).
            </summary>
        </member>
        <member name="P:NPlot.Grid.VerticalGridType">
            <summary>
            Specifies the vertical grid type (none, coarse, or fine).
            </summary>
        </member>
        <member name="P:NPlot.Grid.MajorGridPen">
            <summary>
            The pen used to draw major (coarse) grid lines.
            </summary>
        </member>
        <member name="P:NPlot.Grid.MinorGridPen">
            <summary>
            The pen used to draw minor (fine) grid lines.
            </summary>
        </member>
        <member name="T:NPlot.Grid.GridType">
            <summary>
            
            </summary>
        </member>
        <member name="F:NPlot.Grid.GridType.None">
            <summary>
            No grid.
            </summary>
        </member>
        <member name="F:NPlot.Grid.GridType.Coarse">
            <summary>
            Coarse grid. Lines at large tick positions only.
            </summary>
        </member>
        <member name="F:NPlot.Grid.GridType.Fine">
            <summary>
            Fine grid. Lines at both large and small tick positions.
            </summary>
        </member>
        <member name="T:NPlot.HistogramPlot">
            <summary>
            Provides ability to draw histogram plots.
            </summary>
        </member>
        <member name="M:NPlot.HistogramPlot.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NPlot.HistogramPlot.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Renders the histogram.
            </summary>
            <param name="g">The Graphics surface on which to draw</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="M:NPlot.HistogramPlot.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:NPlot.HistogramPlot.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:NPlot.HistogramPlot.StackedTo(NPlot.HistogramPlot)">
            <summary>
            Stack the histogram to another HistogramPlot.
            </summary>
        </member>
        <member name="M:NPlot.HistogramPlot.DrawInLegend(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a representation of this plot in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="P:NPlot.HistogramPlot.RectangleBrush">
            <summary>
            Set/Get the brush to use if the histogram is filled.
            </summary>
        </member>
        <member name="P:NPlot.HistogramPlot.Filled">
            <summary>
            Whether or not the histogram columns will be filled.
            </summary>
        </member>
        <member name="P:NPlot.HistogramPlot.BaseWidth">
            <summary>
            The width of the histogram bar as a proportion of the data spacing 
            (in range 0.0 - 1.0).
            </summary>
        </member>
        <member name="P:NPlot.HistogramPlot.Center">
            <summary>
            If true, each histogram column will be centered on the associated abscissa value.
            If false, each histogram colum will be drawn between the associated abscissa value, and the next abscissa value.
            Default value is true.
            </summary>
        </member>
        <member name="P:NPlot.HistogramPlot.IsStacked">
            <summary>
            If this histogram plot has another stacked on top, this will be true. Else false.
            </summary>
        </member>
        <member name="P:NPlot.HistogramPlot.Pen">
            <summary>
            The pen used to draw the plot
            </summary>
        </member>
        <member name="P:NPlot.HistogramPlot.Color">
            <summary>
            The color of the pen used to draw lines in this plot.
            </summary>
        </member>
        <member name="P:NPlot.HistogramPlot.BaseOffset">
            <summary>
            Horizontal position of histogram columns is offset by this much (in world coordinates).
            </summary>
        </member>
        <member name="T:NPlot.HorizontalLine">
            <summary>
            Encapsulates functionality for drawing a horizontal line on a plot surface.
            </summary>
        </member>
        <member name="M:NPlot.HorizontalLine.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="ordinateValue">ordinate (Y) value of line.</param>
        </member>
        <member name="M:NPlot.HorizontalLine.#ctor(System.Double,System.Drawing.Color)">
            <summary>
            Constructor
            </summary>
            <param name="ordinateValue">ordinate (Y) value of line.</param>
            <param name="color">draw the line using this color.</param>
        </member>
        <member name="M:NPlot.HorizontalLine.#ctor(System.Double,System.Drawing.Pen)">
            <summary>
            Constructor
            </summary>
            <param name="ordinateValue">ordinate (Y) value of line.</param>
            <param name="pen">Pen to use to draw the line.</param>
        </member>
        <member name="M:NPlot.HorizontalLine.DrawInLegend(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a representation of the horizontal line in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="M:NPlot.HorizontalLine.SuggestXAxis">
            <summary>
            Returns null indicating that x extremities of the line are variable.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:NPlot.HorizontalLine.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:NPlot.HorizontalLine.WriteData(System.Text.StringBuilder,NPlot.RectangleD,System.Boolean)">
            <summary>
            Writes text data describing the horizontal line object to the supplied string builder. It is 
            possible to specify that the data will be written only if the line is in the specified 
            region.
            </summary>
            <param name="sb">the StringBuilder object to write to.</param>
            <param name="region">a region used if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, data will be written only if the line is in the specified region.</param>
        </member>
        <member name="M:NPlot.HorizontalLine.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draws the horizontal line plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="P:NPlot.HorizontalLine.Label">
            <summary>
            A label to associate with the plot - used in the legend.
            </summary>
        </member>
        <member name="P:NPlot.HorizontalLine.ShowInLegend">
            <summary>
            Whether or not to include an entry for this plot in the legend if it exists.
            </summary>
        </member>
        <member name="P:NPlot.HorizontalLine.OrdinateValue">
            <summary>
            ordinate (Y) value to draw horizontal line at.
            </summary>
        </member>
        <member name="P:NPlot.HorizontalLine.Pen">
            <summary>
            Pen to use to draw the horizontal line.
            </summary>
        </member>
        <member name="P:NPlot.HorizontalLine.PixelIndent">
            <summary>
            Each end of the line is indented by this many pixels. 
            </summary>
        </member>
        <member name="P:NPlot.HorizontalLine.LengthScale">
            <summary>
            The line length is multiplied by this amount. Default
            corresponds to a value of 1.0.
            </summary>
        </member>
        <member name="T:NPlot.IGradient">
            <summary>
            Defines a gradient.
            </summary>
        </member>
        <member name="M:NPlot.IGradient.GetColor(System.Double)">
            <summary>
            Gets a color corresponding to a number between 0.0 and 1.0 inclusive.
            </summary>
            <param name="prop">the number to get corresponding color for (between 0.0 and 1.0)</param>
            <returns>The color corresponding to the supplied number.</returns>
        </member>
        <member name="T:NPlot.ImagePlot">
            <summary>
            Encapsulates functionality for plotting data as a 2D image chart.
            </summary>
        </member>
        <member name="M:NPlot.ImagePlot.calculateMinMax">
            <summary>
            Calculates the minimum and maximum values of the data array.
            </summary>
        </member>
        <member name="M:NPlot.ImagePlot.#ctor(System.Double[0:,0:],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="data">the 2D array to plot</param>
            <param name="xStart">the world value corresponding to the 1st position in the x-direction</param>
            <param name="xStep">the world step size between pixels in the x-direction.</param>
            <param name="yStart">the world value corresponding to the 1st position in the y-direction</param>
            <param name="yStep">the world step size between pixels in the y-direction.</param>
            <remarks>no adapters for this yet - when we get some more 2d
            plotting functionality, then perhaps create some.</remarks>
        </member>
        <member name="M:NPlot.ImagePlot.#ctor(System.Double[0:,0:])">
            <summary>
            Constructor
            </summary>
            <param name="data">The 2D array to plot.</param>
        </member>
        <member name="M:NPlot.ImagePlot.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draw on to the supplied graphics surface against the supplied axes.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
            <remarks>TODO: block positions may be off by a pixel or so. maybe. Re-think calculations</remarks>
        </member>
        <member name="M:NPlot.ImagePlot.DrawInLegend(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a representation of this plot in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="M:NPlot.ImagePlot.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:NPlot.ImagePlot.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:NPlot.ImagePlot.WriteData(System.Text.StringBuilder,NPlot.RectangleD,System.Boolean)">
            <summary>
            Write data associated with the plot as text.
            </summary>
            <param name="sb">the string builder to write to.</param>
            <param name="region">Only write out data in this region if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, only data in region is written, else all data is written.</param>
            <remarks>TODO: not implemented.</remarks>
        </member>
        <member name="P:NPlot.ImagePlot.DataMin">
            <summary>
            At or below which value a minimum gradient color should be used.
            </summary>
        </member>
        <member name="P:NPlot.ImagePlot.DataMax">
            <summary>
            At or above which value a maximum gradient color should be used.
            </summary>
        </member>
        <member name="P:NPlot.ImagePlot.Gradient">
            <summary>
            The gradient that specifies the mapping between value and color.
            </summary>
            <remarks>memory allocation in get may be inefficient.</remarks>
        </member>
        <member name="P:NPlot.ImagePlot.Label">
            <summary>
            A label to associate with the plot - used in the legend.
            </summary>
        </member>
        <member name="P:NPlot.ImagePlot.Center">
            <summary>
            If true, pixels are centered on their respective coordinates. If false, they are drawn
            between their coordinates and the coordinates of the the next point in each direction.
            </summary>
        </member>
        <member name="P:NPlot.ImagePlot.ShowInLegend">
            <summary>
            Whether or not to include an entry for this plot in the legend if it exists.
            </summary>
        </member>
        <member name="T:NPlot.ISurface">
            <summary>
            All PlotSurface's implement this interface.
            </summary>
            <remarks>Some of the parameter lists will change to be made more uniform.</remarks>
        </member>
        <member name="M:NPlot.ISurface.DoPaint(System.Windows.Forms.PaintEventArgs,System.Int32,System.Int32)">
            <summary>
            Provides functionality for drawing the control.
            </summary>
            <param name="pe">paint event args</param>
            <param name="width">width of the control.</param>
            <param name="height">height of the control.</param>
        </member>
        <member name="M:NPlot.ISurface.DoMouseUp(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            Provides functionality for handling mouse up events.
            </summary>
            <param name="e">mouse event args</param>
            <param name="ctr">the control</param>
        </member>
        <member name="M:NPlot.ISurface.DoMouseMove(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            Provides functionality for handling mouse move events.
            </summary>
            <param name="e">mouse event args</param>
            <param name="ctr">the control</param>
        </member>
        <member name="M:NPlot.ISurface.DoMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Provides functionality for handling mouse down events.
            </summary>
            <param name="e">mouse event args</param>
        </member>
        <member name="T:NPlot.ITransform2D">
            <summary>
            This interface is useful in the Plot classes for transforming 
            world to physical coordinates. Create on using the GetTransformer
            static method in Transform2D.
            </summary>
        </member>
        <member name="M:NPlot.ITransform2D.Transform(System.Double,System.Double)">
            <summary>
            Transforms the given world point to physical coordinates
            </summary>
        </member>
        <member name="M:NPlot.ITransform2D.Transform(NPlot.PointD)">
            <summary>
            Transforms the given world point to physical coordinates
            </summary>
        </member>
        <member name="T:NPlot.LabelAxis">
            <summary>
            Allows the creation of axes with any number of user defined labels at
            user defined world values along the axis. 
            </summary>
        </member>
        <member name="M:NPlot.LabelAxis.Clone">
            <summary>
            Deep copy of LabelAxis.
            </summary>
            <returns>A copy of the LinearAxis Class.</returns>
        </member>
        <member name="M:NPlot.LabelAxis.DoClone(NPlot.LabelAxis,NPlot.LabelAxis)">
            <summary>
            Helper method for Clone.
            </summary>
            <param name="a">The original object to clone.</param>
            <param name="b">The cloned object.</param>
        </member>
        <member name="M:NPlot.LabelAxis.Init">
            <summary>
            Initialise LabelAxis to default state.
            </summary>
        </member>
        <member name="M:NPlot.LabelAxis.#ctor(NPlot.Axis)">
            <summary>
            Copy constructor
            </summary>
            <param name="a">The Axis to clone.</param>
            <remarks>TODO: [review notes] I don't think this will work as desired.</remarks>
        </member>
        <member name="M:NPlot.LabelAxis.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NPlot.LabelAxis.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="worldMin">Minimum world value</param>
            <param name="worldMax">Maximum world value</param>
        </member>
        <member name="M:NPlot.LabelAxis.AddLabel(System.String,System.Double)">
            <summary>
            Adds a label to the axis
            </summary>
            <param name="name">The label</param>
            <param name="val">The world value at which to place the label</param>
        </member>
        <member name="M:NPlot.LabelAxis.DrawTicks(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Object@,System.Object@)">
            <summary>
            Given Graphics surface, and physical extents of axis, draw ticks and
            associated labels.
            </summary>
            <param name="g">The GDI+ Graphics surface on which to draw.</param>
            <param name="physicalMin">The physical location of the world min point</param>
            <param name="physicalMax">The physical location of the world max point</param>
            <param name="boundingBox">out: smallest box that completely encompasses all of the ticks and tick labels.</param>
            <param name="labelOffset">out: a suitable offset from the axis to draw the axis label.</param>
        </member>
        <member name="M:NPlot.LabelAxis.WorldTickPositions_FirstPass(System.Drawing.Point,System.Drawing.Point,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the large ticks. 
            
            Label axes do not have small ticks.
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
            <param name="smallTickPositions">null</param>
        </member>
        <member name="P:NPlot.LabelAxis.TicksBetweenText">
            <summary>
            If true, large ticks are drawn between the labels, rather
            than at the position of the labels.
            </summary>
        </member>
        <member name="P:NPlot.LabelAxis.SortDataIfNecessary">
            <summary>
            If your data may be be specified out of order (that is 
            abscissa values with a higher index may be less than
            abscissa values of a lower index), then data sorting 
            may be necessary to implement some of the functionality
            of this object. If you know your data is already 
            ordered with abscissa values lowest -> highest, then
            you may set this to false. It's default is true.
            </summary>
        </member>
        <member name="P:NPlot.LabelAxis.PhysicalSpacingMin">
            <summary>
            If consecutive labels are less than this number of pixels appart, 
            some of the labels will not be drawn.
            </summary>
        </member>
        <member name="T:NPlot.LabelPointPlot">
            <summary>
            Encapsulates functionality
            </summary>
        </member>
        <member name="T:NPlot.PointPlot">
            <summary>
            Encapsulates functionality for drawing data as a series of points.
            </summary>
        </member>
        <member name="M:NPlot.PointPlot.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:NPlot.PointPlot.#ctor(NPlot.Marker)">
            <summary>
            Constructor for the marker plot.
            </summary>
            <param name="marker">The marker to use.</param>
        </member>
        <member name="M:NPlot.PointPlot.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draws the point plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="M:NPlot.PointPlot.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:NPlot.PointPlot.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:NPlot.PointPlot.DrawInLegend(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a representation of this plot in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="P:NPlot.PointPlot.Marker">
            <summary>
            The Marker object used for the plot.
            </summary>
        </member>
        <member name="M:NPlot.LabelPointPlot.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:NPlot.LabelPointPlot.#ctor(NPlot.Marker)">
            <summary>
            Constructor
            </summary>
            <param name="marker">The marker type to use for this plot.</param>
        </member>
        <member name="M:NPlot.LabelPointPlot.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draws the plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="P:NPlot.LabelPointPlot.LabelTextPosition">
            <summary>
            The position of the text label in relation to the point.
            </summary>
        </member>
        <member name="P:NPlot.LabelPointPlot.TextData">
            <summary>
            The text datasource to attach to each point.
            </summary>
        </member>
        <member name="P:NPlot.LabelPointPlot.Font">
            <summary>
            The Font used to write text.
            </summary>
        </member>
        <member name="T:NPlot.LabelPointPlot.TextDataAdapter">
            <summary>
            This class us used in conjunction with SequenceAdapter to interpret data
            specified to the TextPlot class.
            </summary>
        </member>
        <member name="T:NPlot.LabelPointPlot.LabelPositions">
            <summary>
            Enumeration of all label positions relative to a point.
            </summary>
        </member>
        <member name="F:NPlot.LabelPointPlot.LabelPositions.Above">
            <summary>
            Above the point
            </summary>
        </member>
        <member name="F:NPlot.LabelPointPlot.LabelPositions.Below">
            <summary>
            Below the point
            </summary>
        </member>
        <member name="F:NPlot.LabelPointPlot.LabelPositions.Left">
            <summary>
            To the left of the point
            </summary>
        </member>
        <member name="F:NPlot.LabelPointPlot.LabelPositions.Right">
            <summary>
            To the right of the point
            </summary>
        </member>
        <member name="T:NPlot.Legend">
            <summary>
            Legend functionality specific to Legends associated with a PlotSurface2D.
            </summary>
        </member>
        <member name="T:NPlot.LegendBase">
            <summary>
            Provides functionality for drawing legends.
            </summary>
            <remarks>
            The class is quite closely tied to PlotSurface2D. 
            </remarks>
        </member>
        <member name="M:NPlot.LegendBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NPlot.LegendBase.GetBoundingBox(System.Drawing.Point,System.Collections.ArrayList,System.Single)">
            <summary>
            Get the bounding box of the rectangle.
            </summary>
            <param name="position">the position of the top left of the legend.</param>
            <param name="plots">Array of plot objects to appear in the legend.</param>
            <param name="scale">if the legend is set to scale, the amount to scale by.</param>>
            <returns></returns>
            <remarks>do implementation that doesn't call draw. Change xPos, yPos to PointF</remarks>
        </member>
        <member name="M:NPlot.LegendBase.Draw(System.Drawing.Graphics,System.Drawing.Point,System.Collections.ArrayList,System.Single)">
            <summary>
            Draw The legend
            </summary>
            <param name="g">The graphics surface on which to draw</param>
            <param name="position">The position of the top left of the axis.</param>
            <param name="plots">Array of plot objects to appear in the legend.</param>
            <param name="scale">if the legend is set to scale, the amount to scale by.</param>
            <returns>bounding box</returns>
        </member>
        <member name="P:NPlot.LegendBase.Font">
            <summary>
            The font used to draw text in the legend.
            </summary>
        </member>
        <member name="P:NPlot.LegendBase.TextColor">
            <summary>
            The color used to draw text in the legend.
            </summary>
        </member>
        <member name="P:NPlot.LegendBase.BackgroundColor">
            <summary>
            The background color of the legend.
            </summary>
        </member>
        <member name="P:NPlot.LegendBase.BorderColor">
            <summary>
            The color of the legend border.
            </summary>
        </member>
        <member name="P:NPlot.LegendBase.BorderStyle">
            <summary>
            The border style to use for the legend.
            </summary>
        </member>
        <member name="P:NPlot.LegendBase.AutoScaleText">
            <summary>
            Whether or not to auto scale text in the legend according the physical
            dimensions of the plot surface.
            </summary>
        </member>
        <member name="P:NPlot.LegendBase.NumberItemsVertically">
            <summary>
            Setting this does two things. First of all, it sets the maximum number of 
            items in the legend vertically. Second of all, it makes the legend grow
            horizontally (as it must given this constraint).
            </summary>
        </member>
        <member name="P:NPlot.LegendBase.NumberItemsHorizontally">
            <summary>
            Setting this does two things. First of all, it sets the maximum number of 
            items in the legend horizontally. Second of all, it makes the legend grow
            vertically (as it must given this constraint).
            </summary>
        </member>
        <member name="T:NPlot.LegendBase.BorderType">
            <summary>
            The types of legend borders (enum).
            </summary>
        </member>
        <member name="F:NPlot.LegendBase.BorderType.None">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:NPlot.LegendBase.BorderType.Line">
            <summary>
            Line border.
            </summary>
        </member>
        <member name="F:NPlot.LegendBase.BorderType.Shadow">
            <summary>
            Shaded border.
            </summary>
        </member>
        <member name="M:NPlot.Legend.AttachTo(NPlot.PlotSurface2D.XAxisPosition,NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Specify the Axes to attach the legend to. 
            </summary>
            <param name="xa">Specify which horizontal axis the legend should be attached to.</param>
            <param name="ya">Specify which vertical axis the legend should be attached to.</param>
        </member>
        <member name="M:NPlot.Legend.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NPlot.Legend.UpdateAxesPositions(NPlot.PhysicalAxis,NPlot.PhysicalAxis,NPlot.PhysicalAxis,NPlot.PhysicalAxis,System.Collections.ArrayList,System.Single,System.Int32,System.Drawing.Rectangle,System.Drawing.Point@)">
            <summary>
            Updates the PlotSurface2D axes to compensate for the legend.
            </summary>
            <param name="pXAxis1">the bottom x axis</param>
            <param name="pYAxis1">the left y axis</param>
            <param name="pXAxis2">the top x axis</param>
            <param name="pYAxis2">the right y axis</param>
            <param name="plots">list of plots.</param>
            <param name="scale">scale parameter (for text and other)</param>
            <param name="padding">padding around plot within bounds.</param>
            <param name="bounds">graphics surface bounds</param>
            <param name="position">legend position</param>
        </member>
        <member name="P:NPlot.Legend.NeverShiftAxes">
            <summary>
            Whether or not the positions of the Axes may be shifted to make
            room for the Legend. 
            </summary>
        </member>
        <member name="P:NPlot.Legend.XOffset">
            <summary>
            Offset from the chosen Y-Axis. TODO: better description.
            </summary>
        </member>
        <member name="P:NPlot.Legend.YOffset">
            <summary>
            Offset from the X-Axis. TODO: better description.
            </summary>
        </member>
        <member name="P:NPlot.Legend.VerticalEdgePlacement">
            <summary>
            Whether or not to attach the legend on the inside of the top
            or bottom axis (which, is specified using the AttachTo method) or the 
            outside. 
            </summary>
        </member>
        <member name="P:NPlot.Legend.HorizontalEdgePlacement">
            <summary>
            Whether or not to attach the legend on the inside of the
            left or right axis (which, is specified using the AttachTo method) 
            or the outside.
            </summary>
        </member>
        <member name="T:NPlot.Legend.Placement">
            <summary>
            Enumeration of possible Legend placements.
            </summary>
        </member>
        <member name="F:NPlot.Legend.Placement.Inside">
            <summary>
            Inside the plot area.
            </summary>
        </member>
        <member name="F:NPlot.Legend.Placement.Outside">
            <summary>
            Outside the plot area.
            </summary>
        </member>
        <member name="T:NPlot.LinearAxis">
            <summary>
            Provides functionality for drawing axes with a linear numeric scale.
            </summary>
        </member>
        <member name="M:NPlot.LinearAxis.Clone">
            <summary>
            Deep copy of LinearAxis.
            </summary>
            <returns>A copy of the LinearAxis Class</returns>
        </member>
        <member name="M:NPlot.LinearAxis.DoClone(NPlot.LinearAxis,NPlot.LinearAxis)">
            <summary>
            Helper method for Clone.
            </summary>
        </member>
        <member name="M:NPlot.LinearAxis.#ctor(NPlot.Axis)">
            <summary>
            Copy constructor
            </summary>
            <param name="a">The Axis to clone</param>
        </member>
        <member name="M:NPlot.LinearAxis.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NPlot.LinearAxis.#ctor(System.Double,System.Double)">
            <summary>
            Construct a linear axis with the provided world min and max values.
            </summary>
            <param name="worldMin">the world minimum value of the axis.</param>
            <param name="worldMax">the world maximum value of the axis.</param>
        </member>
        <member name="M:NPlot.LinearAxis.DrawTicks(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Object@,System.Object@)">
            <summary>
            Draws the large and small ticks [and tick labels] for this axis.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="boundingBox">out: smallest box that completely surrounds all ticks and associated labels for this axis.</param>
            <param name="labelOffset">out: offset from the axis to draw the axis label.</param>
        </member>
        <member name="M:NPlot.LinearAxis.WorldTickPositions_SecondPass(System.Drawing.Point,System.Drawing.Point,System.Collections.ArrayList,System.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the small ticks
            if they have not already been generated.
            
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">The positions of the large ticks.</param>
            <param name="smallTickPositions">If null, small tick positions are returned via this parameter. Otherwise this function does nothing.</param>
        </member>
        <member name="M:NPlot.LinearAxis.AdjustedWorldValue(System.Double)">
            <summary>
            Adjusts a real world value to one that has been modified to
            reflect the Axis Scale and Offset properties.
            </summary>
            <param name="world">world value to adjust</param>
            <returns>adjusted world value</returns>
        </member>
        <member name="M:NPlot.LinearAxis.WorldTickPositions_FirstPass(System.Drawing.Point,System.Drawing.Point,System.Collections.ArrayList@,System.Collections.ArrayList@)">
             <summary>
             Determines the positions, in world coordinates, of the large ticks. 
             When the physical extent of the axis is small, some of the positions 
             that were generated in this pass may be converted to small tick 
             positions and returned as well.
            
             If the LargeTickStep isn't set then this is calculated automatically and
             depends on the physical extent of the axis. 
             </summary>
             <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
             <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
             <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
             <param name="smallTickPositions">ArrayList containing the positions of the small ticks if calculated, null otherwise.</param>
        </member>
        <member name="M:NPlot.LinearAxis.DetermineLargeTickStep(System.Single,System.Boolean@)">
            <summary>
            Calculates the world spacing between large ticks, based on the physical
            axis length (parameter), world axis length, Mantissa values and 
            MinPhysicalLargeTickStep. A value such that at least two 
            </summary>
            <param name="physicalLength">physical length of the axis</param>
            <param name="shouldCullMiddle">Returns true if we were forced to make spacing of 
            large ticks too small in order to ensure that there are at least two of 
            them. The draw ticks method should not draw more than two large ticks if this
            returns true.</param>
            <returns>Large tick spacing</returns>
            <remarks>TODO: This can be optimised a bit.</remarks>
        </member>
        <member name="M:NPlot.LinearAxis.DetermineNumberSmallTicks(System.Double)">
            <summary>
            Given the large tick step, determine the number of small ticks that should
            be placed in between.
            </summary>
            <param name="bigTickDist">the large tick step.</param>
            <returns>the number of small ticks to place between large ticks.</returns>
        </member>
        <member name="F:NPlot.LinearAxis.largeTickStep_">
            <summary>
            If set !NaN, gives the distance between large ticks.
            </summary>
        </member>
        <member name="F:NPlot.LinearAxis.ApproxNumberLargeTicks">
            <summary>
            If LargeTickStep isn't specified, then a suitable value is 
            calculated automatically. To determine the tick spacing, the
            world axis length is divided by ApproximateNumberLargeTicks
            and the next lowest distance m*10^e for some m in the Mantissas
            set and some integer e is used as the large tick spacing. 
            </summary>
        </member>
        <member name="F:NPlot.LinearAxis.Mantissas">
            <summary>
            If LargeTickStep isn't specified, then a suitable value is
            calculated automatically. The value will be of the form
            m*10^e for some m in this set.
            </summary>
        </member>
        <member name="F:NPlot.LinearAxis.SmallTickCounts">
            <summary>
            If NumberOfSmallTicks isn't specified then .... 
            If specified LargeTickStep manually, then no small ticks unless
            NumberOfSmallTicks specified.
            </summary>
        </member>
        <member name="P:NPlot.LinearAxis.LargeTickStep">
            <summary>
            The distance between large ticks. If this is set to NaN [default],
            this distance will be calculated automatically.
            </summary>
        </member>
        <member name="P:NPlot.LinearAxis.LargeTickValue">
            <summary>
            If set, a large tick will be placed at this position, and other large ticks will 
            be placed relative to this position.
            </summary>
        </member>
        <member name="P:NPlot.LinearAxis.NumberOfSmallTicks">
            <summary>
            The number of small ticks between large ticks.
            </summary>
        </member>
        <member name="P:NPlot.LinearAxis.Scale">
            <summary>
            Scale to apply to world values when labelling axis:
            (labelWorld = world * scale + offset). This does not
            affect the "real" world range of the axis. 
            </summary>
        </member>
        <member name="P:NPlot.LinearAxis.Offset">
            <summary>
            Offset to apply to world values when labelling the axis:
            (labelWorld = axisWorld * scale + offset). This does not
            affect the "real" world range of the axis.
            </summary>
        </member>
        <member name="T:NPlot.LinearGradient">
            <summary>
            Class for creating a linear gradient.
            </summary>
        </member>
        <member name="M:NPlot.LinearGradient.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Constructor.
            </summary>
            <param name="minColor">The color corresponding to 0.0</param>
            <param name="maxColor">The color corresponding to 1.0</param>
        </member>
        <member name="M:NPlot.LinearGradient.GetColor(System.Double)">
            <summary>
            Gets a color corresponding to a number between 0.0 and 1.0 inclusive. The color will
            be a linear interpolation of the min and max colors.
            </summary>
            <param name="prop">the number to get corresponding color for (between 0.0 and 1.0)</param>
            <returns>The color corresponding to the supplied number.</returns>
        </member>
        <member name="P:NPlot.LinearGradient.MaxColor">
            <summary>
            The color corresponding to 0.0
            </summary>
        </member>
        <member name="P:NPlot.LinearGradient.MinColor">
            <summary>
            The color corresponding to 1.0
            </summary>
        </member>
        <member name="P:NPlot.LinearGradient.VoidColor">
            <summary>
            The color corresponding to NaN
            </summary>
        </member>
        <member name="T:NPlot.LinePlot">
            <summary>
            Encapsulates functionality for plotting data as a line chart.
            </summary>
        </member>
        <member name="M:NPlot.LinePlot.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NPlot.LinePlot.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="dataSource">The data source to associate with this plot</param>
        </member>
        <member name="M:NPlot.LinePlot.#ctor(System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="ordinateData">the ordinate data to associate with this plot.</param>
            <param name="abscissaData">the abscissa data to associate with this plot.</param>
        </member>
        <member name="M:NPlot.LinePlot.DrawLineOrShadow(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis,System.Boolean)">
            <summary>
            Draws the line plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
            <param name="drawShadow">If true draw the shadow for the line. If false, draw line.</param>
        </member>
        <member name="M:NPlot.LinePlot.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draws the line plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="M:NPlot.LinePlot.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:NPlot.LinePlot.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:NPlot.LinePlot.DrawInLegend(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a representation of this plot in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="P:NPlot.LinePlot.Shadow">
            <summary>
            If true, draw a shadow under the line.
            </summary>
        </member>
        <member name="P:NPlot.LinePlot.ShadowColor">
            <summary>
            Color of line shadow if drawn. Use Shadow method to turn shadow on and off.
            </summary>
        </member>
        <member name="P:NPlot.LinePlot.ShadowOffset">
            <summary>
            Offset of shadow line from primary line.
            </summary>
        </member>
        <member name="P:NPlot.LinePlot.Pen">
            <summary>
            The pen used to draw the plot
            </summary>
        </member>
        <member name="P:NPlot.LinePlot.Color">
            <summary>
            The color of the pen used to draw lines in this plot.
            </summary>
        </member>
        <member name="T:NPlot.LogAxis">
            <summary>
            The class implementing logarithmic axes.
            </summary>
        </member>
        <member name="M:NPlot.LogAxis.Clone">
            <summary>
            Deep Copy of the LogAxis.
            </summary>
            <returns>A Copy of the LogAxis Class.</returns>
        </member>
        <member name="M:NPlot.LogAxis.DoClone(NPlot.LogAxis,NPlot.LogAxis)">
            <summary>
            Helper method for Clone (actual implementation)
            </summary>
            <param name="a">The original object to clone.</param>
            <param name="b">The cloned object.</param>
        </member>
        <member name="M:NPlot.LogAxis.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NPlot.LogAxis.#ctor(NPlot.Axis)">
            <summary>
            Copy Constructor
            </summary>
            <param name="a">The Axis to clone.</param>
        </member>
        <member name="M:NPlot.LogAxis.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="worldMin">Minimum World value for the axis.</param>
            <param name="worldMax">Maximum World value for the axis.</param>
        </member>
        <member name="M:NPlot.LogAxis.DrawTicks(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Object@,System.Object@)">
            <summary>
            Draw the ticks.
            </summary>
            <param name="g">The drawing surface on which to draw.</param>
            <param name="physicalMin">The minimum physical extent of the axis.</param>
            <param name="physicalMax">The maximum physical extent of the axis.</param>
            <param name="boundingBox">out: smallest box that completely encompasses all of the ticks and tick labels.</param>
            <param name="labelOffset">out: a suitable offset from the axis to draw the axis label.</param>
            <returns> An ArrayList containing the offset from the axis required for an axis label
            to miss this tick, followed by a bounding rectangle for the tick and tickLabel drawn.</returns>
        </member>
        <member name="M:NPlot.LogAxis.WorldTickPositions_SecondPass(System.Drawing.Point,System.Drawing.Point,System.Collections.ArrayList,System.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the small ticks
            if they have not already been generated.
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">The positions of the large ticks, unchanged</param>
            <param name="smallTickPositions">If null, small tick positions are returned via this parameter. Otherwise this function does nothing.</param>
        </member>
        <member name="M:NPlot.LogAxis.WorldTickPositions_FirstPass(System.Drawing.Point,System.Drawing.Point,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the log spaced large ticks. 
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
            <param name="smallTickPositions">null</param>
        </member>
        <member name="M:NPlot.LogAxis.DetermineTickSpacing">
            <summary>
            Determines the tick spacing.
            </summary>
            <returns>The tick spacing (in decades!)</returns>
        </member>
        <member name="M:NPlot.LogAxis.DetermineNumberSmallTicks(System.Double)">
            <summary>
            Determines the number of small ticks between two large ticks.
            </summary>
            <param name="bigTickDist">The distance between two large ticks.</param>
            <returns>The number of small ticks.</returns>
        </member>
        <member name="M:NPlot.LogAxis.WorldToPhysical(System.Double,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            World to physical coordinate transform.
            </summary>
            <param name="coord">The coordinate value to transform.</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="clip">if false, then physical value may extend outside worldMin / worldMax. If true, the physical value returned will be clipped to physicalMin or physicalMax if it lies outside this range.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>TODO: make Reversed property work for this.</remarks>
        </member>
        <member name="M:NPlot.LogAxis.PhysicalToWorld(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            Return the world coordinate of the projection of the point p onto
            the axis.
            </summary>
            <param name="p">The point to project onto the axis</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="clip">If true, the world value will be clipped to WorldMin or WorldMax as appropriate if it lies outside this range.</param>
            <returns>The world value corresponding to the projection of the point p onto the axis.</returns>
        </member>
        <member name="P:NPlot.LogAxis.LargeTickStep">
            <summary>
            The step between large ticks, expressed in decades for the Log scale.
            </summary>
        </member>
        <member name="P:NPlot.LogAxis.LargeTickValue">
            <summary>
            Position of one of the large ticks [other positions will be calculated relative to this one].
            </summary>
        </member>
        <member name="P:NPlot.LogAxis.NumberSmallTicks">
            <summary>
            The number of small ticks between large ticks.
            </summary>
        </member>
        <member name="P:NPlot.LogAxis.WorldMin">
            <summary>
            The minimum world extent of the axis. Must be greater than zero.
            </summary>
        </member>
        <member name="P:NPlot.LogAxis.WorldMax">
            <summary>
            The maximum world extent of the axis. Must be greater than zero.
            </summary>
        </member>
        <member name="P:NPlot.LogAxis.IsLinear">
            <summary>
            Get whether or not this axis is linear. It is not.
            </summary>
        </member>
        <member name="T:NPlot.Marker">
            <summary>
            Encapsulates functionality relating to markers used by the PointPlot class.
            </summary>
        </member>
        <member name="M:NPlot.Marker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NPlot.Marker.#ctor(NPlot.Marker.MarkerType)">
            <summary>
            Constructor
            </summary>
            <param name="markertype">The marker type.</param>
        </member>
        <member name="M:NPlot.Marker.#ctor(NPlot.Marker.MarkerType,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="markertype">The marker type.</param>
            <param name="size">The marker size.</param>
        </member>
        <member name="M:NPlot.Marker.#ctor(NPlot.Marker.MarkerType,System.Int32,System.Drawing.Color)">
            <summary>
            Constructor
            </summary>
            <param name="markertype">The marker type.</param>
            <param name="size">The marker size.</param>
            <param name="color">The marker color.</param>
        </member>
        <member name="M:NPlot.Marker.#ctor(NPlot.Marker.MarkerType,System.Int32,System.Drawing.Pen)">
            <summary>
            Constructor
            </summary>
            <param name="markertype">The marker type.</param>
            <param name="size">The marker size.</param>
            <param name="pen">The marker Pen.</param>
        </member>
        <member name="M:NPlot.Marker.#ctor(NPlot.Marker.MarkerType,System.Int32,System.Drawing.Pen,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="markertype">The marker type.</param>
            <param name="size">The marker size.</param>
            <param name="pen">The marker Pen.</param>
            <param name="fill">The fill flag.</param>
        </member>
        <member name="M:NPlot.Marker.Draw(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Draws the marker at the given position
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="x">The [physical] x position to draw the marker.</param>
            <param name="y">The [physical] y position to draw the marker.</param>
        </member>
        <member name="P:NPlot.Marker.Type">
            <summary>
            The type of marker.
            </summary>
        </member>
        <member name="P:NPlot.Marker.DropLine">
            <summary>
            Whether or not to draw a dropline.
            </summary>
        </member>
        <member name="P:NPlot.Marker.Size">
            <summary>
            The marker size.
            </summary>
        </member>
        <member name="P:NPlot.Marker.FillBrush">
            <summary>
            The brush used to fill the marker.
            </summary>
        </member>
        <member name="P:NPlot.Marker.Filled">
            <summary>
            Fill with color.
            </summary>
        </member>
        <member name="P:NPlot.Marker.Color">
            <summary>
            Sets the pen color and fill brush to be solid with the specified color.
            </summary>
        </member>
        <member name="P:NPlot.Marker.Pen">
            <summary>
            The Pen used to draw the marker.
            </summary>
        </member>
        <member name="T:NPlot.Marker.MarkerType">
            <summary>
            Enumeration of all different types of marker.
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.Cross1">
            <summary>
            A simple cross marker (x).
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.Cross2">
            <summary>
            Another simple cross marker (+).
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.Circle">
            <summary>
            A circle marker.
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.Square">
            <summary>
            A square marker.
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.Triangle">
            <summary>
            A triangle marker (upwards).
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.TriangleUp">
            <summary>
            A triangle marker (upwards).
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.TriangleDown">
            <summary>
            A triangle marker (upwards).
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.Diamond">
            <summary>
            A diamond,
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.FilledCircle">
            <summary>
            A filled circle
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.FilledSquare">
            <summary>
            A filled square
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.FilledTriangle">
            <summary>
            A filled triangle
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.Flag">
            <summary>
            A small flag (up)
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.FlagUp">
            <summary>
            A small flag (up)
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.FlagDown">
            <summary>
            A small flag (down)
            </summary>
        </member>
        <member name="F:NPlot.Marker.MarkerType.None">
            <summary>
            No marker
            </summary>
        </member>
        <member name="T:NPlot.MarkerItem">
            <summary>
            Class for placement of a single marker.
            </summary>
        </member>
        <member name="M:NPlot.MarkerItem.#ctor(NPlot.PointD)">
            <summary>
            Constructs a square marker at the (world) point point.
            </summary>
            <param name="point">the world position at which to place the marker</param>
        </member>
        <member name="M:NPlot.MarkerItem.#ctor(System.Double,System.Double)">
            <summary>
            Default constructor - a square black marker.
            </summary>
            <param name="x">The world x position of the marker</param>
            <param name="y">The world y position of the marker</param>
        </member>
        <member name="M:NPlot.MarkerItem.#ctor(NPlot.Marker,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="marker">The marker to place on the chart.</param>
            <param name="x">The world x position of the marker</param>
            <param name="y">The world y position of the marker</param>
        </member>
        <member name="M:NPlot.MarkerItem.#ctor(NPlot.Marker,NPlot.PointD)">
            <summary>
            Constructor
            </summary>
            <param name="marker">The marker to place on the chart.</param>
            <param name="point">The world position of the marker</param>
        </member>
        <member name="M:NPlot.MarkerItem.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draws the marker on a plot surface.
            </summary>
            <param name="g">graphics surface on which to draw</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="T:NPlot.NPlotException">
            <summary>
            All exceptions thrown by NPlot are of this type.
            </summary>
        </member>
        <member name="M:NPlot.NPlotException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:NPlot.NPlotException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:NPlot.NPlotException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:NPlot.PageAlignedPhysicalAxis">
            <summary>
            The bare minimum needed to do world->physical and physical->world transforms for
            vertical axes. Also includes tick placements. Built for speed.
            </summary>
            <remarks>currently unused</remarks>
        </member>
        <member name="M:NPlot.PageAlignedPhysicalAxis.#ctor(NPlot.PhysicalAxis)">
            <summary>
            Construct from a fully-blown physical axis.
            </summary>
            <param name="physicalAxis">the physical axis to get initial values from.</param>
        </member>
        <member name="M:NPlot.PageAlignedPhysicalAxis.WorldToPhysical(System.Double)">
            <summary>
            return the physical coordinate corresponding to the supplied world coordinate.
            </summary>
            <param name="world">world coordinate to determine physical coordinate for.</param>
            <returns>the physical coordinate corresoindng to the supplied world coordinate.</returns>
        </member>
        <member name="M:NPlot.PageAlignedPhysicalAxis.WorldToPhysicalClipped(System.Double)">
            <summary>
            return the physical coordinate corresponding to the supplied world coordinate,
            clipped if it is outside the bounds of the axis
            </summary>
            <param name="world">world coordinate to determine physical coordinate for.</param>
            <returns>the physical coordinate corresoindng to the supplied world coordinate.</returns>
        </member>
        <member name="M:NPlot.PageAlignedPhysicalAxis.PhysicalToWorld(System.Single)">
            <summary>
            return the world coordinate corresponding to the supplied physical coordinate.
            </summary>
            <param name="physical">physical coordinate to determine world coordinate for.</param>
            <returns>the world coordinate corresponding to the supplied </returns>
        </member>
        <member name="T:NPlot.PhysicalAxis">
            <summary>
            This class adds physical positioning information [PhysicalMin, PhysicalMax]
            and related functionality on top of a specific Axis class. 
            
            It's an interesting
            question where to put this information. It belongs with every specific axis
            type, but on the other hand, users of the library as it is normally used 
            should not see it because
            positioning of axes is handled internally by PlotSurface2D. Therefore it doesn't make sense
            to put it in the Axis class unless it is internal. But if this were done it would restrict
            use of this information outside the library always, which is not what is wanted.
            The main disadvantage with the method chosen is that there is a lot of passing
            of the positional information between physical axis and the underlying logical
            axis type.
            
            C# doesn't have templates. If it did, I might derive PhysicalAxis from the 
            templated Axis type (LinearAxis etc). Instead, have used a has-a relationship
            with an Axis superclass.
            </summary>
        </member>
        <member name="M:NPlot.PhysicalAxis.#ctor">
            <summary>
            Prevent default construction.
            </summary>
        </member>
        <member name="M:NPlot.PhysicalAxis.#ctor(NPlot.Axis,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Construct
            </summary>
            <param name="a">The axis this is a physical representation of.</param>
            <param name="physicalMin">the physical position of the world minimum axis value.</param>
            <param name="physicalMax">the physical position of the world maximum axis value.</param>
        </member>
        <member name="M:NPlot.PhysicalAxis.GetBoundingBox">
            <summary>
            Returns the smallest rectangle that completely contains all parts of the axis [including ticks and label].
            </summary>
            <returns>the smallest rectangle that completely contains all parts of the axis [including ticks and label].</returns>
        </member>
        <member name="M:NPlot.PhysicalAxis.Draw(System.Drawing.Graphics,System.Drawing.Rectangle@)">
            <summary>
            Draws the axis on the given graphics surface.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="boundingBox">out: the axis bounding box - the smallest rectangle that
            completely contains all parts of the axis [including ticks and label].</param>
        </member>
        <member name="M:NPlot.PhysicalAxis.WorldToPhysical(System.Double,System.Boolean)">
            <summary>
            Given a world coordinate value, returns the physical position of the 
            coordinate along the axis.
            </summary>
            <param name="coord">the world coordinate</param>
            <param name="clip">if true, the physical position returned will be clipped to the physical max / min position as appropriate if the world value is outside the limits of the axis.</param>
            <returns>the physical position of the coordinate along the axis.</returns>
        </member>
        <member name="M:NPlot.PhysicalAxis.PhysicalToWorld(System.Drawing.Point,System.Boolean)">
            <summary>
            Given a physical point on the graphics surface, returns the world
            value of it's projection onto the axis [i.e. closest point on the axis]. 
            The function is implemented for axes of arbitrary orientation.
            </summary>
            <param name="p">Physical point to find corresponding world value of.</param>
            <param name="clip">if true, returns a world position outside WorldMin / WorldMax
            range if this is closer to the axis line. If false, such values will
            be clipped to be either WorldMin or WorldMax as appropriate.</param>
            <returns>the world value of the point's projection onto the axis.</returns>
        </member>
        <member name="M:NPlot.PhysicalAxis.SetWorldLimitsFromPhysical(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            This sets new world limits for the axis from two physical points
            selected within the plot area.
            </summary>
            <param name="min">The upper left point of the selection.</param>
            <param name="max">The lower right point of the selection.</param>
        </member>
        <member name="P:NPlot.PhysicalAxis.PhysicalMin">
            <summary>
            The physical position corresponding to WorldMin.
            </summary>
        </member>
        <member name="P:NPlot.PhysicalAxis.PhysicalMax">
            <summary>
            The physical position corresponding to WorldMax.
            </summary>
        </member>
        <member name="P:NPlot.PhysicalAxis.Axis">
            <summary>
            The axis this object adds physical extents to.
            </summary>
        </member>
        <member name="P:NPlot.PhysicalAxis.PhysicalLength">
            <summary>
            The length in pixels of the axis.
            </summary>
        </member>
        <member name="P:NPlot.PhysicalAxis.PixelWorldLength">
            <summary>
            The length in world coordinates of one pixel. 
            </summary>
        </member>
        <member name="T:NPlot.PiAxis">
            <summary>
            Axis with labels in multiples of Pi. Maybe needs a better name.
            Lots of functionality still to be added - currently only puts labels
            at whole increments of pi, want arbitrary increments, automatically
            determined and dependance on physical length. 
            Volunteers? 
            </summary>
        </member>
        <member name="M:NPlot.PiAxis.Clone">
            <summary>
            Deep copy of PiAxis.
            </summary>
            <returns>A copy of the LinearAxis Class.</returns>
        </member>
        <member name="M:NPlot.PiAxis.DoClone(NPlot.PiAxis,NPlot.PiAxis)">
            <summary>
            Helper method for Clone.
            </summary>
            <param name="a">The original object to clone.</param>
            <param name="b">The cloned object.</param>
        </member>
        <member name="M:NPlot.PiAxis.Init">
            <summary>
            Initialise PiAxis to default state.
            </summary>
        </member>
        <member name="M:NPlot.PiAxis.#ctor(NPlot.Axis)">
            <summary>
            Copy constructor
            </summary>
            <param name="a">The Axis to clone.</param>
            <remarks>TODO: [review notes] I don't think this will work as desired.</remarks>
        </member>
        <member name="M:NPlot.PiAxis.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NPlot.PiAxis.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="worldMin">Minimum world value</param>
            <param name="worldMax">Maximum world value</param>
        </member>
        <member name="M:NPlot.PiAxis.DrawTicks(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Object@,System.Object@)">
            <summary>
            Given Graphics surface, and physical extents of axis, draw ticks and
            associated labels.
            </summary>
            <param name="g">The GDI+ Graphics surface on which to draw.</param>
            <param name="physicalMin">The physical location of the world min point</param>
            <param name="physicalMax">The physical location of the world max point</param>
            <param name="boundingBox">out: smallest box that completely encompasses all of the ticks and tick labels.</param>
            <param name="labelOffset">out: a suitable offset from the axis to draw the axis label.</param>
        </member>
        <member name="M:NPlot.PiAxis.WorldTickPositions_FirstPass(System.Drawing.Point,System.Drawing.Point,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the large ticks. 
            
            Label axes do not have small ticks.
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
            <param name="smallTickPositions">null</param>
        </member>
        <member name="T:NPlot.PlotSurface2D">
            <summary>
            Implements the surface on which IDrawables are drawn. Is extended
            by Bitmap.PlotSurface2D, Windows.PlotSurface2D etc. TODO: better explanation.
            </summary>
        </member>
        <member name="M:NPlot.PlotSurface2D.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit test with the given point and returns information 
            about the object being hit.
            </summary>
            <param name="p">The point to test.</param>
            <returns></returns>
        </member>
        <member name="M:NPlot.PlotSurface2D.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NPlot.PlotSurface2D.Add(NPlot.IDrawable)">
            <summary>
            Adds a drawable object to the plot surface with z-order 0. If the object is an IPlot,
            the PlotSurface2D axes will also be updated. 
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
        </member>
        <member name="M:NPlot.PlotSurface2D.Add(NPlot.IDrawable,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:NPlot.PlotSurface2D.Add(NPlot.IDrawable,NPlot.PlotSurface2D.XAxisPosition,NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes with
            z-order of 0. If the object is an IPlot, the PlotSurface2D axes will also
            be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
        </member>
        <member name="M:NPlot.PlotSurface2D.Add(NPlot.IDrawable,NPlot.PlotSurface2D.XAxisPosition,NPlot.PlotSurface2D.YAxisPosition,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:NPlot.PlotSurface2D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the the PlotSurface2D and all contents [axes, drawables, and legend] on the 
            supplied graphics surface.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="bounds">A bounding box on this surface that denotes the area on the
            surface to confine drawing to.</param>
        </member>
        <member name="M:NPlot.PlotSurface2D.Clear">
            <summary>
            Clears the plot and resets all state to the default.
            </summary>
        </member>
        <member name="M:NPlot.PlotSurface2D.AddAxesConstraint(NPlot.AxesConstraint)">
            <summary>
            Add an axis constraint to the plot surface. Axes constraints give you 
            control over where NPlot positions each axes, and the world - pixel
            ratio.
            </summary>
            <param name="constraint">The axis constraint to add.</param>
        </member>
        <member name="M:NPlot.PlotSurface2D.Remove(NPlot.IDrawable,System.Boolean)">
            <summary>
            Remove a drawable object. 
            Note that axes are not updated.
            </summary>
            <param name="p">Drawable to remove.</param>
            <param name="updateAxes">if true, the axes are updated.</param>
        </member>
        <member name="M:NPlot.PlotSurface2D.RefreshZOrdering">
            <summary>
            If a plot is removed, then the ordering_ list needs to be 
            recalculated. 
            </summary>
        </member>
        <member name="M:NPlot.PlotSurface2D.WhichXAxis(NPlot.IPlot)">
            <summary>
            Returns the x-axis associated with a given plot.
            </summary>
            <param name="plot">the plot to get associated x-axis.</param>
            <returns>the axis associated with the plot.</returns>
        </member>
        <member name="M:NPlot.PlotSurface2D.WhichYAxis(NPlot.IPlot)">
            <summary>
            Returns the y-axis associated with a given plot.
            </summary>
            <param name="plot">the plot to get associated y-axis.</param>
            <returns>the axis associated with the plot.</returns>
        </member>
        <member name="P:NPlot.PlotSurface2D.PlotAreaBoundingBoxCache">
            <summary>
            The physical bounding box of the last drawn plot surface area is available here.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.XAxis1">
            <summary>
            The bottom abscissa axis.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.YAxis1">
            <summary>
            The left ordinate axis.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.XAxis2">
            <summary>
            The top abscissa axis.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.YAxis2">
            <summary>
            The right ordinate axis.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.PhysicalXAxis1Cache">
            <summary>
            The physical XAxis1 that was last drawn.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.PhysicalYAxis1Cache">
            <summary>
            The physical YAxis1 that was last drawn.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.PhysicalXAxis2Cache">
            <summary>
            The physical XAxis2 that was last drawn.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.PhysicalYAxis2Cache">
            <summary>
            The physical YAxis2 that was last drawn.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.Title">
            <summary>
            The chart title.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.TitleFont">
            <summary>
            The plot title font.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.Padding">
            <summary>
            The distance in pixels to leave between of the edge of the bounding rectangle
            supplied to the Draw method, and the markings that make up the plot.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.TitleColor">
            <summary>
            Sets the title to be drawn using a solid brush of this color.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.TitleBrush">
            <summary>
            The brush used for drawing the title.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.PlotBackColor">
            <summary>
            A color used to paint the plot background. Mutually exclusive with PlotBackImage and PlotBackBrush
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.PlotBackImage">
            <summary>
            An imaged used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.PlotBackBrush">
            <summary>
            A Rectangle brush used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.SmoothingMode">
            <summary>
            Smoothing mode to use when drawing plots.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.Legend">
            <summary>
            Legend to use. If this property is null [default], then the plot
            surface will have no corresponding legend.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.AutoScaleTitle">
            <summary>
            Whether or not the title will be scaled according to size of the plot surface.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.AutoScaleAutoGeneratedAxes">
            <summary>
            When plots are added to the plot surface, the axes they are attached to
            are immediately modified to reflect data of the plot. If 
            AutoScaleAutoGeneratedAxes is true when a plot is added, the axes will
            be turned in to auto scaling ones if they are not already [tick marks,
            tick text and label size scaled to size of plot surface]. If false,
            axes will not be autoscaling.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.Drawables">
            <summary>
            Gets an array list containing all drawables currently added to the PlotSurface2D.
            </summary>
        </member>
        <member name="P:NPlot.PlotSurface2D.LegendZOrder">
            <summary>
            Setting this value determines the order (relative to IDrawables added to the plot surface)
            that the legend is drawn.
            </summary>
        </member>
        <member name="T:NPlot.PlotSurface2D.XAxisPosition">
            <summary>
            Possible positions of the X axis.
            </summary>
        </member>
        <member name="F:NPlot.PlotSurface2D.XAxisPosition.Top">
            <summary>
            X axis is on the top.
            </summary>
        </member>
        <member name="F:NPlot.PlotSurface2D.XAxisPosition.Bottom">
            <summary>
            X axis is on the bottom.
            </summary>
        </member>
        <member name="T:NPlot.PlotSurface2D.YAxisPosition">
            <summary>
            Possible positions of the Y axis.
            </summary>
        </member>
        <member name="F:NPlot.PlotSurface2D.YAxisPosition.Left">
            <summary>
            Y axis on the left.
            </summary>
        </member>
        <member name="F:NPlot.PlotSurface2D.YAxisPosition.Right">
            <summary>
            Y axis on the right.
            </summary>
        </member>
        <member name="T:NPlot.PointD">
            <summary>
            Represtents a point in two-dimensional space. Used for representation
            of points world coordinates.
            </summary>
        </member>
        <member name="F:NPlot.PointD.X">
            <summary>
            X-Coordinate of the point.
            </summary>
        </member>
        <member name="F:NPlot.PointD.Y">
            <summary>
            Y-Coordinate of the point.
            </summary>
        </member>
        <member name="M:NPlot.PointD.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">X-Coordinate of the point.</param>
            <param name="y">Y-Coordinate of the point.</param>
        </member>
        <member name="M:NPlot.PointD.ToString">
            <summary>
            returns a string representation of the point.
            </summary>
            <returns>string representation of the point.</returns>
        </member>
        <member name="T:NPlot.IRectangleBrush">
            <summary>
            Classes that implement this interface can provide a brush 
            sized according to a given rectangle.
            </summary>
        </member>
        <member name="M:NPlot.IRectangleBrush.Get(System.Drawing.Rectangle)">
            <summary>
            Gets a brush according to the supplied rectangle.
            </summary>
            <param name="rectangle">the rectangle used to construct the brush</param>
            <returns>The brush</returns>
        </member>
        <member name="T:NPlot.RectangleBrushes">
            <summary>
            Collection of useful brushes.
            </summary>
        </member>
        <member name="T:NPlot.RectangleBrushes.Solid">
            <summary>
            A solid brush
            </summary>
        </member>
        <member name="M:NPlot.RectangleBrushes.Solid.#ctor(System.Drawing.Color)">
            <summary>
            Constructor
            </summary>
            <param name="c">brush color</param>
        </member>
        <member name="M:NPlot.RectangleBrushes.Solid.Get(System.Drawing.Rectangle)">
            <summary>
            Gets a brush according to the supplied rectangle.
            </summary>
            <param name="rectangle">the rectangle used to construct the brush</param>
            <returns>The solid brush</returns>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.AliceBlue">
            <summary>
            AliceBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.AntiqueWhite">
            <summary>
            AntiqueWhite solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Aqua">
            <summary>
            Aqua solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Aquamarine">
            <summary>
            Aquamarine solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Azure">
            <summary>
            Azure solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Beige">
            <summary>
            Beige solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Bisque">
            <summary>
            Bisque solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Black">
            <summary>
            Black solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.BlanchedAlmond">
            <summary>
            BlanchedAlmond solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Blue">
            <summary>
            Blue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.BlueViolet">
            <summary>
            BlueViolet solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Brown">
            <summary>
            Brown solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.BurlyWood">
            <summary>
            BurlyWood solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.CadetBlue">
            <summary>
            CadetBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Chartreuse">
            <summary>
            Chartreuse solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Chocolate">
            <summary>
            Chocolate solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Coral">
            <summary>
            Coral solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.CornflowerBlue">
            <summary>
            CornflowerBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Cornsilk">
            <summary>
            Cornsilk solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Crimson">
            <summary>
            Crimson solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Cyan">
            <summary>
            Cyan solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkBlue">
            <summary>
            DarkBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkCyan">
            <summary>
            DarkCyan solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkGoldenrod">
            <summary>
            DarkGoldenrod solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkGray">
            <summary>
            DarkGray solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkGreen">
            <summary>
            DarkGreen solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkKhaki">
            <summary>
            DarkKhaki solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkMagenta">
            <summary>
            DarkMagenta solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkOliveGreen">
            <summary>
            DarkOliveGreen solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkOrange">
            <summary>
            DarkOrange solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkOrchid">
            <summary>
            DarkOrchid solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkRed">
            <summary>
            DarkRed solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkSalmon">
            <summary>
            DarkSalmon solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkSeaGreen">
            <summary>
            DarkSeaGreen solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkSlateBlue">
            <summary>
            DarkSlateBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkSlateGray">
            <summary>
            DarkSlateGray solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkTurquoise">
            <summary>
            DarkTurquoise solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DarkViolet">
            <summary>
            DarkViolet solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DeepPink">
            <summary>
            DeepPink solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DeepSkyBlue">
            <summary>
            DeepSkyBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DimGray">
            <summary>
            DimGray solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.DodgerBlue">
            <summary>
            DodgerBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Firebrick">
            <summary>
            Firebrick solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.FloralWhite">
            <summary>
            FloralWhite solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.ForestGreen">
            <summary>
            ForestGreen solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Fuchsia">
            <summary>
            Fuchsia solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Gainsboro">
            <summary>
            Gainsboro solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.GhostWhite">
            <summary>
            GhostWhite solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Gold">
            <summary>
            Gold solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Goldenrod">
            <summary>
            Goldenrod solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Gray">
            <summary>
            Gray  solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Green">
            <summary>
            Green solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.GreenYellow">
            <summary>
            GreenYellow solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Honeydew">
            <summary>
            Honeydew solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.HotPink">
            <summary>
            HotPink solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.IndianRed">
            <summary>
            IndianRed solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Indigo">
            <summary>
            Indigo solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Ivory">
            <summary>
            Ivory solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Khaki">
            <summary>
            Khaki solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Lavender">
            <summary>
            Lavender solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LavenderBlush">
            <summary>
            LavenderBlush solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LawnGreen">
            <summary>
            LawnGreen solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LemonChiffon">
            <summary>
            LemonChiffon solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LightBlue">
            <summary>
            LightBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LightCoral">
            <summary>
            LightCoral solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LightCyan">
            <summary>
            LightCyan solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LightGoldenrodYellow">
            <summary>
            LightGoldenrodYellow solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LightGray">
            <summary>
            LightGray solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LightGreen">
            <summary>
            LightGreen solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LightPink">
            <summary>
            LightPink solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LightSalmon">
            <summary>
            LightSalmon solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LightSeaGreen">
            <summary>
            LightSeaGreen solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LightSkyBlue">
            <summary>
            LightSkyBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LightSlateGray">
            <summary>
            LightSlateGray solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LightSteelBlue">
            <summary>
            LightSteelBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LightYellow">
            <summary>
            LightYellow solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Lime">
            <summary>
            Lime solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.LimeGreen">
            <summary>
            LimeGreen solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Linen">
            <summary>
            Color.Linen solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Magenta">
            <summary>
            Color.Magenta solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Maroon">
            <summary>
            Maroon solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.MediumAquamarine">
            <summary>
            MediumAquamarine solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.MediumBlue">
            <summary>
            MediumBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.MediumOrchid">
            <summary>
            MediumOrchid  solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.MediumPurple">
            <summary>
            MediumPurple solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.MediumSeaGreen">
            <summary>
            MediumSeaGreen solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.MediumSlateBlue">
            <summary>
            MediumSlateBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.MediumSpringGreen">
            <summary>
            MediumSpringGreen solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.MediumTurquoise">
            <summary>
            MediumTurquoise solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.MediumVioletRed">
            <summary>
            MediumVioletRed solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.MidnightBlue">
            <summary>
            MidnightBlue  solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.MintCream">
            <summary>
            MintCream solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.MistyRose">
            <summary>
            MistyRose solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Moccasin">
            <summary>
            Moccasin solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.NavajoWhite">
            <summary>
            NavajoWhite solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Navy">
            <summary>
            Navy solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.OldLace">
            <summary>
            OldLace solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Olive">
            <summary>
            Olive solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.OliveDrab">
            <summary>
            OliveDrab solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Orange">
            <summary>
            Orange solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.OrangeRed">
            <summary>
            OrangeRed solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Orchid">
            <summary>
            Orchid solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.PaleGoldenrod">
            <summary>
            PaleGoldenrod solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.PaleGreen">
            <summary>
            PaleGreen solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.PaleTurquoise">
            <summary>
            PaleTurquoise solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.PaleVioletRed">
            <summary>
            PaleVioletRed solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.PapayaWhip">
            <summary>
            PapayaWhip solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.PeachPuff">
            <summary>
            PeachPuff solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Peru">
            <summary>
            Peru solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Pink">
            <summary>
            Pink solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Plum">
            <summary>
            Plum solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.PowderBlue">
            <summary>
            PowderBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Purple">
            <summary>
            Purple solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Red">
            <summary>
            Red solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.RosyBrown">
            <summary>
            RosyBrown solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.RoyalBlue">
            <summary>
            RoyalBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.SaddleBrown">
            <summary>
            SaddleBrown solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Salmon">
            <summary>
            Salmon solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.SandyBrown">
            <summary>
            SandyBrown solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.SeaGreen">
            <summary>
            SeaGreen solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.SeaShell">
            <summary>
            SeaShell solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Sienna">
            <summary>
            Sienna solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Silver">
            <summary>
            Silver solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.SkyBlue">
            <summary>
            SkyBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.SlateBlue">
            <summary>
            SlateBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.SlateGray">
            <summary>
            SlateGray solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Snow">
            <summary>
            Snow solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.SpringGreen">
            <summary>
            SpringGreen solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.SteelBlue">
            <summary>
            SteelBlue solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Tan">
            <summary>
            Tan solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Teal">
            <summary>
            Teal solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Thistle">
            <summary>
            Thistle solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Tomato">
            <summary>
            Tomato solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Transparent">
            <summary>
            Transparent solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Turquoise">
            <summary>
            Turquoise solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Violet">
            <summary>
            Violet solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Wheat">
            <summary>
            Wheat solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.White">
            <summary>
            White solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.WhiteSmoke">
            <summary>
            WhiteSmoke solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.Yellow">
            <summary>
            Yellow solid brush.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Solid.YellowGreen">
            <summary>
            YellowGreen solid brush.
            </summary>
        </member>
        <member name="T:NPlot.RectangleBrushes.Horizontal">
            <summary>
            A brush with horizontal gradient.
            </summary>
        </member>
        <member name="M:NPlot.RectangleBrushes.Horizontal.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Constructor
            </summary>
            <param name="c1">Color on left.</param>
            <param name="c2">Color on right.</param>
        </member>
        <member name="M:NPlot.RectangleBrushes.Horizontal.Get(System.Drawing.Rectangle)">
            <summary>
            Gets a brush according to the supplied rectangle.
            </summary>
            <param name="rectangle">the rectangle used to construct the brush</param>
            <returns>The horizontal brush</returns>
        </member>
        <member name="P:NPlot.RectangleBrushes.Horizontal.FaintBlueFade">
            <summary>
            Default brush - fades from faint blue to white.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Horizontal.FaintRedFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Horizontal.FaintGreenFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="T:NPlot.RectangleBrushes.Vertical">
            <summary>
            A brush with vertical gradient.
            </summary>
        </member>
        <member name="M:NPlot.RectangleBrushes.Vertical.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Constructor
            </summary>
            <param name="c1">top color [or bottom?]</param>
            <param name="c2">bottom color [or top?]</param>
        </member>
        <member name="M:NPlot.RectangleBrushes.Vertical.Get(System.Drawing.Rectangle)">
            <summary>
            Gets a brush according to the supplied rectangle.
            </summary>
            <param name="rectangle">the rectangle used to construct the brush</param>
            <returns>The vertical brush</returns>
        </member>
        <member name="P:NPlot.RectangleBrushes.Vertical.FaintBlueFade">
            <summary>
            Default brush - fades from faint blue to white.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Vertical.FaintRedFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.Vertical.FaintGreenFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="T:NPlot.RectangleBrushes.HorizontalCenterFade">
            <summary>
            A brush with horizontal gradient that fades into center then out again.
            </summary>
        </member>
        <member name="M:NPlot.RectangleBrushes.HorizontalCenterFade.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Constructor
            </summary>
            <param name="c1">inner color</param>
            <param name="c2">outer color</param>
        </member>
        <member name="M:NPlot.RectangleBrushes.HorizontalCenterFade.Get(System.Drawing.Rectangle)">
            <summary>
            Gets a brush according to the supplied rectangle.
            </summary>
            <param name="rectangle">the rectangle used to construct the brush</param>
            <returns>The horizontal center fade brush</returns>
        </member>
        <member name="P:NPlot.RectangleBrushes.HorizontalCenterFade.FaintBlueFade">
            <summary>
            Default brush - fades from faint blue to white.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.HorizontalCenterFade.FaintRedFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.HorizontalCenterFade.FaintGreenFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="T:NPlot.RectangleBrushes.VerticalCenterFade">
            <summary>
            Brush with vertical gradient that fades into center then out again.
            </summary>
        </member>
        <member name="M:NPlot.RectangleBrushes.VerticalCenterFade.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Constructor
            </summary>
            <param name="c1">inner color</param>
            <param name="c2">outer color</param>
        </member>
        <member name="M:NPlot.RectangleBrushes.VerticalCenterFade.Get(System.Drawing.Rectangle)">
            <summary>
            Gets a brush according to the supplied rectangle.
            </summary>
            <param name="rectangle">the rectangle used to construct the brush</param>
            <returns>The vertical center fade brush</returns>
        </member>
        <member name="P:NPlot.RectangleBrushes.VerticalCenterFade.FaintBlueFade">
            <summary>
            Default brush - fades from faint blue to white.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.VerticalCenterFade.FaintRedFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="P:NPlot.RectangleBrushes.VerticalCenterFade.FaintGreenFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="T:NPlot.RectangleD">
            <summary>
            Stores a set of four double numbers that represent the location and size of
            a rectangle. TODO: implement more functionality similar to Drawing.RectangleF.
            </summary>
        </member>
        <member name="M:NPlot.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:NPlot.RectangleD.Height">
            <summary>
            The rectangle height.
            </summary>
        </member>
        <member name="P:NPlot.RectangleD.Width">
            <summary>
            The rectangle width.
            </summary>
        </member>
        <member name="P:NPlot.RectangleD.X">
            <summary>
            The minimum x coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:NPlot.RectangleD.Y">
            <summary>
            The minimum y coordinate of the rectangle.
            </summary>
        </member>
        <member name="T:NPlot.SequenceAdapter">
            <summary>
            This class is responsible for interpreting the various ways you can 
            specify data to plot objects using the DataSource, DataMember, ordinateData
            and AbscissaData properties. It is a bridge that provides access to this
            data via a single interface.
            </summary>
        </member>
        <member name="M:NPlot.SequenceAdapter.#ctor(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Constructor. The data source specifiers must be specified here.
            </summary>
            <param name="dataSource">The source containing a list of values to plot.</param>
            <param name="dataMember">The specific data member in a multimember data source to get data from.</param>
            <param name="ordinateData">The source containing a list of values to plot on the ordinate axis, or a the name of the column to use for this data.</param>
            <param name="abscissaData">The source containing a list of values to plot on the abscissa axis, or a the name of the column to use for this data.</param>
        </member>
        <member name="M:NPlot.SequenceAdapter.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing the data.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:NPlot.SequenceAdapter.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing the data.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:NPlot.SequenceAdapter.WriteData(System.Text.StringBuilder,NPlot.RectangleD,System.Boolean)">
            <summary>
            Writes data out as text. 
            </summary>
            <param name="sb">StringBuilder to write to.</param>
            <param name="region">Only write out data in this region if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, only data in region is written, else all data is written.</param>
        </member>
        <member name="P:NPlot.SequenceAdapter.Count">
            <summary>
            Returns the number of points.
            </summary>
        </member>
        <member name="P:NPlot.SequenceAdapter.Item(System.Int32)">
            <summary>
            Returns the ith point.
            </summary>
        </member>
        <member name="T:NPlot.StartStep">
            <summary>
            Encapsulates a Start and Step value. This is useful for specifying a regularly spaced set of 
            abscissa values.
            </summary>
        </member>
        <member name="M:NPlot.StartStep.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="start">the first value of the set of points specified by this object.</param>
            <param name="step">the step that specifies the separation between successive points.</param>
        </member>
        <member name="P:NPlot.StartStep.Start">
            <summary>
            The first value of the set of points specified by this object.
            </summary>
        </member>
        <member name="P:NPlot.StartStep.Step">
            <summary>
            The step that specifies the separation between successive points.
            </summary>
        </member>
        <member name="T:NPlot.StepGradient">
            <summary>
            Class for creating a rainbow legend.
            </summary>
        </member>
        <member name="M:NPlot.StepGradient.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:NPlot.StepGradient.#ctor(NPlot.StepGradient.Type)">
            <summary>
            Constructor
            </summary>
            <param name="stepType">type of gradient</param>
        </member>
        <member name="M:NPlot.StepGradient.GetColor(System.Double)">
            <summary>
            Gets a color corresponding to a number between 0.0 and 1.0 inclusive. The color will
            be a linear interpolation of the min and max colors.
            </summary>
            <param name="prop">the number to get corresponding color for (between 0.0 and 1.0)</param>
            <returns>The color corresponding to the supplied number.</returns>
        </member>
        <member name="P:NPlot.StepGradient.StepType">
            <summary>
            Sets the type of step gradient.
            </summary>
        </member>
        <member name="T:NPlot.StepGradient.Type">
            <summary>
            Types of step gradient defined.
            </summary>
        </member>
        <member name="F:NPlot.StepGradient.Type.Rainbow">
            <summary>
            Rainbow gradient type (colors of the rainbow)
            </summary>
        </member>
        <member name="F:NPlot.StepGradient.Type.RGB">
            <summary>
            RGB gradient type (red, green blud).
            </summary>
        </member>
        <member name="T:NPlot.StepPlot">
            <summary>
            Encapsulates functionality for plotting data as a stepped line.
            </summary>
        </member>
        <member name="M:NPlot.StepPlot.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NPlot.StepPlot.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draws the step plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="M:NPlot.StepPlot.SuggestXAxis">
            <summary>
            Returns an X-axis suitable for use by this plot. The axis will be one that is just long
            enough to show all data.
            </summary>
            <returns>X-axis suitable for use by this plot.</returns>
        </member>
        <member name="M:NPlot.StepPlot.SuggestYAxis">
            <summary>
            Returns an Y-axis suitable for use by this plot. The axis will be one that is just long
            enough to show all data.
            </summary>
            <returns>Y-axis suitable for use by this plot.</returns>
        </member>
        <member name="M:NPlot.StepPlot.DrawInLegend(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a representation of this plot in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="P:NPlot.StepPlot.Center">
            <summary>
            Gets or sets whether or not steps should be centered. If true, steps will be centered on the
            X abscissa values. If false, the step corresponding to a given x-value will be drawn between 
            this x-value and the next x-value at the current y-height.
            </summary>
        </member>
        <member name="P:NPlot.StepPlot.Pen">
            <summary>
            The pen used to draw the plot
            </summary>
        </member>
        <member name="P:NPlot.StepPlot.Color">
            <summary>
            The color of the pen used to draw lines in this plot.
            </summary>
        </member>
        <member name="P:NPlot.StepPlot.HideVerticalSegments">
            <summary>
            If true, then vertical lines are hidden.
            </summary>
        </member>
        <member name="P:NPlot.StepPlot.HideHorizontalSegments">
            <summary>
            If true, then vertical lines are hidden.
            </summary>
        </member>
        <member name="P:NPlot.StepPlot.WidthScale">
            <summary>
            The horizontal line length is multiplied by this amount. Default
            corresponds to a value of 1.0.
            </summary>
        </member>
        <member name="T:NPlot.TextItem">
            <summary>
            This class implements drawing text against two physical axes.
            </summary>
        </member>
        <member name="M:NPlot.TextItem.#ctor(NPlot.PointD,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="position">The position the text starts.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:NPlot.TextItem.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draws the text on a plot surface.
            </summary>
            <param name="g">graphics surface on which to draw</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="P:NPlot.TextItem.Text">
            <summary>
            Text associated.
            </summary>
        </member>
        <member name="P:NPlot.TextItem.Start">
            <summary>
            The starting point for the text.
            </summary>
        </member>
        <member name="P:NPlot.TextItem.TextBrush">
            <summary>
            The brush used to draw the text.
            </summary>
        </member>
        <member name="P:NPlot.TextItem.TextColor">
            <summary>
            Set the text to be drawn with a solid brush of this color.
            </summary>
        </member>
        <member name="P:NPlot.TextItem.TextFont">
            <summary>
            The font used to draw the text associated with the arrow.
            </summary>
        </member>
        <member name="T:NPlot.TradingDateTimeAxis">
            <summary>
            Provides a DateTime axis that removes non-trading days.
            </summary>
        </member>
        <member name="M:NPlot.TradingDateTimeAxis.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NPlot.TradingDateTimeAxis.#ctor(NPlot.Axis)">
            <summary>
            Copy Constructor
            </summary>
            <param name="a">construct a TradingDateTimeAxis based on this provided axis.</param>
        </member>
        <member name="M:NPlot.TradingDateTimeAxis.Init">
            <summary>
            Helper function for constructors.
            </summary>
        </member>
        <member name="M:NPlot.TradingDateTimeAxis.Clone">
            <summary>
            Deep copy of DateTimeAxis.
            </summary>
            <returns>A copy of the DateTimeAxis Class.</returns>
        </member>
        <member name="M:NPlot.TradingDateTimeAxis.DoClone(NPlot.TradingDateTimeAxis,NPlot.TradingDateTimeAxis)">
            <summary>
            Helper method for Clone.
            </summary>
            <param name="a">The cloned target object.</param>
            <param name="b">The cloned source object.</param>
        </member>
        <member name="M:NPlot.TradingDateTimeAxis.WorldToPhysical(System.Double,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            World to physical coordinate transform.
            </summary>
            <param name="coord">The coordinate value to transform.</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="clip">if false, then physical value may extend outside worldMin / worldMax. If true, the physical value returned will be clipped to physicalMin or physicalMax if it lies outside this range.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>Not sure how much time is spent in this often called function. If it's lots, then
            worth optimizing (there is scope to do so).</remarks>
        </member>
        <member name="M:NPlot.TradingDateTimeAxis.PhysicalToWorld(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            Transforms a physical coordinate to an axis world 
            coordinate given the physical extremites of the axis.
            </summary>
            <param name="p">the point to convert</param>
            <param name="physicalMin">the physical minimum extremity of the axis</param>
            <param name="physicalMax">the physical maximum extremity of the axis</param>
            <param name="clip">whether or not to clip the world value to lie in the range of the axis if it is outside.</param>
            <returns></returns>
        </member>
        <member name="M:NPlot.TradingDateTimeAxis.SparseWorldRemap(System.Double)">
            <summary>
            Remap a world coordinate into a "virtual" world, where non-trading dates and times are collapsed.
            </summary>
            <remarks>
            This code works under asumption that there are exactly 24*60*60 seconds in a day
            This is strictly speaking not correct but apparently .NET 2.0 does not count leap seconds.
            Luckilly, Ticks == 0  =~= 0001-01-01T00:00 =~= Monday
            First tried a version fully on floating point arithmetic,
            but failed hopelessly due to rounding errors.
            </remarks>
            <param name="coord">world coordinate to transform.</param>
            <returns>equivalent virtual world coordinate.</returns>
        </member>
        <member name="M:NPlot.TradingDateTimeAxis.ReverseSparseWorldRemap(System.Double)">
            <summary>
            Remaps a "virtual" world coordinates back to true world coordinates.
            </summary>
            <param name="coord">virtual world coordinate to transform.</param>
            <returns>equivalent world coordinate.</returns>
        </member>
        <member name="M:NPlot.TradingDateTimeAxis.SparseWorldAdd(System.Double,System.Double)">
            <summary>
            Adds a delta amount to the given world coordinate in such a way that
            all "sparse gaps" are skipped.  In other words, the returned value is
            in delta distance from the given in the "virtual" world.
            </summary>
            <param name="coord">world coordinate to shift.</param>
            <param name="delta">shif amount in "virtual" units.</param>
            <returns></returns>
        </member>
        <member name="M:NPlot.TradingDateTimeAxis.WithinTradingHours(System.Double)">
            <summary>
            Check whether the given coordinate falls within defined trading hours.
            </summary>
            <param name="coord">world coordinate in ticks to check.</param>
            <returns>true if in trading hours, false if in non-trading gap.</returns>
        </member>
        <member name="M:NPlot.TradingDateTimeAxis.OnTradingDays(System.Double)">
            <summary>
            Check whether the given coordinate falls on trading days.
            </summary>
            <param name="coord">world coordinate in ticks to check.</param>
            <returns>true if on Mon - Fri.</returns>
        </member>
        <member name="M:NPlot.TradingDateTimeAxis.WorldTickPositions_FirstPass(System.Drawing.Point,System.Drawing.Point,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Determines the positions of all Large and Small ticks.
            </summary>
            <remarks>
            The method WorldTickPositions_FirstPass() from the base works just fine, except that it
            does not account for non-trading gaps in time, therefore, when less than two days are visible
            an own algorithm is used (to show intraday time).  Otherwise the base class implementation is used
            but the output is corrected to remove ticks on non-trading days (Sat, Sun).
            </remarks>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
            <param name="smallTickPositions">null</param>
        </member>
        <member name="M:NPlot.TradingDateTimeAxis.LargeTickLabel(System.DateTime)">
            <summary>
            Get an appropriate label name, given the DateTime of a label
            </summary>
            <param name="tickDate">the DateTime to get the label name for</param>
            <returns>A label name appropriate to the supplied DateTime.</returns>
        </member>
        <member name="P:NPlot.TradingDateTimeAxis.WorldMin">
            <summary>
            The axis world min value.
            </summary>
        </member>
        <member name="P:NPlot.TradingDateTimeAxis.WorldMax">
            <summary>
            The axis world max value.
            </summary>
        </member>
        <member name="P:NPlot.TradingDateTimeAxis.StartTradingTime">
            <summary>
            Optional time at which trading begins.
            All data points earlied than that (same day) will be collapsed.
            </summary>
        </member>
        <member name="P:NPlot.TradingDateTimeAxis.EndTradingTime">
            <summary>
            Optional time at which trading ends.
            All data points later than that (same day) will be collapsed.
            </summary>
        </member>
        <member name="P:NPlot.TradingDateTimeAxis.IsLinear">
            <summary>
            Get whether or not this axis is linear.
            </summary>
        </member>
        <member name="P:NPlot.TradingDateTimeAxis.SparseWorldLength">
            <summary>
            World extent in virtual (sparse) units.
            </summary>
        </member>
        <member name="T:NPlot.Transform2D">
            <summary>
            Encapsulates functionality for transforming world to physical coordinates optimally.
            </summary>
            <remarks>The existence of the whole ITransform2D thing might need revising. Not convinced it's the best way.</remarks>
        </member>
        <member name="M:NPlot.Transform2D.GetTransformer(NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Constructs the optimal ITransform2D object for the supplied x and y axes.
            </summary>
            <param name="xAxis">The xAxis to use for the world to physical transform.</param>
            <param name="yAxis">The yAxis to use for the world to physical transform.</param>
            <returns>An ITransform2D derived object for converting from world to physical coordinates.</returns>
        </member>
        <member name="T:NPlot.Transform2D.DefaultTransform2D">
            <summary>
            This class does world -> physical transforms for the general case
            </summary>
        </member>
        <member name="M:NPlot.Transform2D.DefaultTransform2D.#ctor(NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Constructor
            </summary>
            <param name="xAxis">The x-axis to use for transforms</param>
            <param name="yAxis">The y-axis to use for transforms</param>
        </member>
        <member name="M:NPlot.Transform2D.DefaultTransform2D.Transform(System.Double,System.Double)">
            <summary>
            Transforms the given world point to physical coordinates
            </summary>
            <param name="x">x coordinate of world point to transform.</param>
            <param name="y">y coordinate of world point to transform.</param>
            <returns>the corresponding physical point.</returns>
        </member>
        <member name="M:NPlot.Transform2D.DefaultTransform2D.Transform(NPlot.PointD)">
            <summary>
            Transforms the given world point to physical coordinates
            </summary>
            <param name="worldPoint">the world point to transform</param>
            <returns>the corresponding physical point</returns>
        </member>
        <member name="T:NPlot.Transform2D.FastTransform2D">
            <summary>
            This class does highly efficient world->physical and physical->world transforms
            for linear axes. 
            </summary>
        </member>
        <member name="M:NPlot.Transform2D.FastTransform2D.#ctor(NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Constructor
            </summary>
            <param name="xAxis">The x-axis to use for transforms</param>
            <param name="yAxis">The y-axis to use for transforms</param>
        </member>
        <member name="M:NPlot.Transform2D.FastTransform2D.Transform(System.Double,System.Double)">
            <summary>
            Transforms the given world point to physical coordinates
            </summary>
            <param name="x">x coordinate of world point to transform.</param>
            <param name="y">y coordinate of world point to transform.</param>
            <returns>the corresponding physical point.</returns>
        </member>
        <member name="M:NPlot.Transform2D.FastTransform2D.Transform(NPlot.PointD)">
            <summary>
            Transforms the given world point to physical coordinates
            </summary>
            <param name="worldPoint">the world point to transform</param>
            <returns>the corresponding physical point</returns>
        </member>
        <member name="T:NPlot.Utils">
            <summary>
            General purpose utility functions used internally.
            </summary>
        </member>
        <member name="F:NPlot.Utils.Epsilon">
            <summary>
            Numbers less than this are considered insignificant. This number is
            bigger than double.Epsilon.
            </summary>
        </member>
        <member name="M:NPlot.Utils.DoubleEqual(System.Double,System.Double)">
            <summary>
            Returns true if the absolute difference between parameters is less than Epsilon
            </summary>
            <param name="a">first number to compare</param>
            <param name="b">second number to compare</param>
            <returns>true if equal, false otherwise</returns>
        </member>
        <member name="M:NPlot.Utils.Swap(System.Double@,System.Double@)">
            <summary>
            Swaps the value of two doubles.
            </summary>
            <param name="a">first value to swap.</param>
            <param name="b">second value to swap.</param>
        </member>
        <member name="M:NPlot.Utils.Distance(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calculate the distance between two points, a and b.
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Distance between points a and b</returns>
        </member>
        <member name="M:NPlot.Utils.Distance(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Calculate the distance between two points, a and b.
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Distance between points a and b</returns>
        </member>
        <member name="M:NPlot.Utils.ToDouble(System.Object)">
            <summary>
            Converts an object of type DateTime or IConvertible to double representation. 
            Mapping is 1:1. Note: the System.Convert.ToDouble method can not convert a boxed 
            DateTime to double. This implementation can - but the "is" check probably makes
            it much slower.
            </summary>
            <remarks>Compare speed with System.Convert.ToDouble and revise code that calls this if significant speed difference.</remarks>
            <param name="o">The object to convert to double.</param>
            <returns>double value associated with the object.</returns>
        </member>
        <member name="M:NPlot.Utils.ArrayMinMax(System.Collections.IList,System.Double@,System.Double@)">
            <summary>
            Returns the minimum and maximum values in an IList. The members of the list
            can be of different types - any type for which the function Utils.ConvertToDouble
            knows how to convert into a double.
            </summary>
            <param name="a">The IList to search.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>true if min max set, false otherwise (a == null or zero length).</returns>
        </member>
        <member name="M:NPlot.Utils.RowArrayMinMax(System.Data.DataRowCollection,System.Double@,System.Double@,System.String)">
            <summary>
            Returns the minimum and maximum values in a DataRowCollection.
            </summary>
            <param name="rows">The row collection to search.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="columnName">The name of the column in the row collection to search over.</param>
            <returns>true is min max set, false otherwise (a = null or zero length).</returns>
        </member>
        <member name="M:NPlot.Utils.DataViewArrayMinMax(System.Data.DataView,System.Double@,System.Double@,System.String)">
            <summary>
            Returns the minimum and maximum values in a DataView.
            </summary>
            <param name="data">The DataView to search.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="columnName">The name of the column in the row collection to search over.</param>
            <returns>true is min max set, false otherwise (a = null or zero length).</returns>
        </member>
        <member name="M:NPlot.Utils.UnitVector(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Returns unit vector along the line  a->b.
            </summary>
            <param name="a">line start point.</param>
            <param name="b">line end point.</param>
            <returns>The unit vector along the specified line.</returns>
        </member>
        <member name="M:NPlot.Utils.ScaleFont(System.Drawing.Font,System.Double)">
            <summary>
            Get a Font exactly the same as the passed in one, except for scale factor.
            </summary>
            <param name="initial">The font to scale.</param>
            <param name="scale">Scale by this factor.</param>
            <returns>The scaled font.</returns>
        </member>
        <member name="M:NPlot.Utils.TiledImage(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            Creates a bitmap from another that is tiled size times in each direction.
            </summary>
            <param name="image">bitmap to tile</param>
            <param name="size">number of times to tile in each direction.</param>
            <returns>the tiled bitmap.</returns>
        </member>
        <member name="T:NPlot.VerticalLine">
            <summary>
            Encapsulates functionality for drawing a vertical line on a plot surface.
            </summary>
        </member>
        <member name="M:NPlot.VerticalLine.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="abscissaValue">abscissa (X) value of line.</param>
        </member>
        <member name="M:NPlot.VerticalLine.#ctor(System.Double,System.Drawing.Color)">
            <summary>
            Constructor
            </summary>
            <param name="abscissaValue">abscissa (X) value of line.</param>
            <param name="color">draw the line using this color.</param>
        </member>
        <member name="M:NPlot.VerticalLine.#ctor(System.Double,System.Drawing.Pen)">
            <summary>
            Constructor
            </summary>
            <param name="abscissaValue">abscissa (X) value of line.</param>
            <param name="pen">Pen to use to draw the line.</param>
        </member>
        <member name="M:NPlot.VerticalLine.DrawInLegend(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a representation of the line in the legend
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="M:NPlot.VerticalLine.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:NPlot.VerticalLine.SuggestYAxis">
            <summary>
            Returns null indicating that y extremities of the line are variable.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:NPlot.VerticalLine.WriteData(System.Text.StringBuilder,NPlot.RectangleD,System.Boolean)">
            <summary>
            Writes text data describing the vertical line object to the supplied string builder. It is 
            possible to specify that the data will be written only if the line is in the specified 
            region.
            </summary>
            <param name="sb">the StringBuilder object to write to.</param>
            <param name="region">a region used if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, data will be written only if the line is in the specified region.</param>
        </member>
        <member name="M:NPlot.VerticalLine.Draw(System.Drawing.Graphics,NPlot.PhysicalAxis,NPlot.PhysicalAxis)">
            <summary>
            Draws the vertical line plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="P:NPlot.VerticalLine.Label">
            <summary>
            A label to associate with the plot - used in the legend.
            </summary>
        </member>
        <member name="P:NPlot.VerticalLine.ShowInLegend">
            <summary>
            Whether or not to include an entry for this plot in the legend if it exists.
            </summary>
        </member>
        <member name="P:NPlot.VerticalLine.AbscissaValue">
            <summary>
            abscissa (X) value to draw horizontal line at.
            </summary>
        </member>
        <member name="P:NPlot.VerticalLine.Pen">
            <summary>
            Pen to use to draw the horizontal line.
            </summary>
        </member>
        <member name="P:NPlot.VerticalLine.PixelIndent">
            <summary>
            Each end of the line is indented by this many pixels. 
            </summary>
        </member>
        <member name="P:NPlot.VerticalLine.LengthScale">
            <summary>
            The line length is multiplied by this amount. Default
            corresponds to a value of 1.0.
            </summary>
        </member>
        <member name="T:NPlot.Web.Design.PlotSurface2D">
            <summary>
            The Design Time rendered for the NPlot.web.PlotSurface2D control.
            </summary>
        </member>
        <member name="M:NPlot.Web.Design.PlotSurface2D.GetDesignTimeHtml">
            <summary>
            The design time generated HTML for the control.
            </summary>
            <returns>A string containing the HTML rendering.</returns>
        </member>
        <member name="T:NPlot.Web.PlotSurface2D">
            <summary>
            A PlotSurface2D web control. Rather than use this control, I generally create bitmaps
            using Bitmap.PlotSurface2D, then use the ToBrowser() method in Bitmap.PlotSurface2D to
            return them as a page request response (and point the src in an image tag to this page).
            
            This is not as nice from a users perspective but is more efficient. 
            
            Note: this control can chew up memory until the user session ends if the client cancels
            the page load before the image has loaded. 
            </summary>
        </member>
        <member name="M:NPlot.Web.PlotSurface2D.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:NPlot.Web.PlotSurface2D.plotUrl">
            <summary>
            The URL to redirect for the plot.
            </summary>
        </member>
        <member name="M:NPlot.Web.PlotSurface2D.prefix">
            <summary>
            the prefix used for the session variables
            </summary>
        </member>
        <member name="M:NPlot.Web.PlotSurface2D.Clear">
            <summary>
            Clears the plot.
            </summary>
        </member>
        <member name="M:NPlot.Web.PlotSurface2D.Add(NPlot.IDrawable)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
        </member>
        <member name="M:NPlot.Web.PlotSurface2D.Add(NPlot.IDrawable,NPlot.PlotSurface2D.XAxisPosition,NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
        </member>
        <member name="M:NPlot.Web.PlotSurface2D.Add(NPlot.IDrawable,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:NPlot.Web.PlotSurface2D.Add(NPlot.IDrawable,NPlot.PlotSurface2D.XAxisPosition,NPlot.PlotSurface2D.YAxisPosition,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:NPlot.Web.PlotSurface2D.buildPlotURL">
            <summary>
            Ivan Ivanov wrote this function. From his email:
            If the request string contains encoded parameters values [e.g. #  - %23]. 
            The call to request.Url.ToString() will decode values [e.g. instead of %23 
            it will return #]. On the subsequent request to the page that contains the 
            nplot control [when the actual drawing of the image takes place] the request 
            url will be cut up to the unformated value [e.g. #] and since the PlotSurface2D_ 
            is added at the end of the query string, it will be missing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPlot.Web.PlotSurface2D.OnInit(System.EventArgs)">
            <summary>
            Initialization event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NPlot.Web.PlotSurface2D.Render(System.Web.UI.HtmlTextWriter)">
            <summary> 
            Render this control as an HTML stream.
            </summary>
            <param name="output">The HTML writer to write out to.</param>
        </member>
        <member name="M:NPlot.Web.PlotSurface2D.AddAxesConstraint(NPlot.AxesConstraint)">
            <summary>
            Add an axis constraint to the plot surface. Axis constraints can
            specify relative world-pixel scalings, absolute axis positions etc.
            </summary>
            <param name="c">The axis constraint to add.</param>
        </member>
        <member name="M:NPlot.Web.PlotSurface2D.Remove(NPlot.IDrawable,System.Boolean)">
            <summary>
            Remove a drawable object from the plot surface.
            </summary>
            <param name="p">the drawable to remove</param>
            <param name="updateAxes">whether or not to update the axes after removing the idrawable.</param>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.Title">
            <summary>
            The plot surface title.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.TitleFont">
            <summary>
            The plot title font.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.Padding">
            <summary>
            The distance in pixels to leave between of the edge of the bounding rectangle
            supplied to the Draw method, and the markings that make up the plot.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.XAxis1">
            <summary>
            The first abscissa axis.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.YAxis1">
            <summary>
            The first ordinate axis.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.XAxis2">
            <summary>
            The second abscissa axis.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.YAxis2">
            <summary>
            The second ordinate axis.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.PlotBackColor">
            <summary>
            A color used to paint the plot background. Mutually exclusive with PlotBackImage and PlotBackBrush
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.PlotBackImage">
            <summary>
            An imaged used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.PlotBackBrush">
            <summary>
            A Rectangle brush used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.Legend">
            <summary>
            Gets or Sets the legend to use with this plot surface.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.LegendZOrder">
            <summary>
            Gets or Sets the legend z-order.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.SmoothingMode">
            <summary>
            Smoothing mode to use when drawing plots.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.BackColor">
            <summary>
            The bitmap background color outside the bounds of the plot surface.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.AutoScaleTitle">
            <summary>
            Whether or not the title will be scaled according to size of the plot 
            surface.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.AutoScaleAutoGeneratedAxes">
            <summary>
            When plots are added to the plot surface, the axes they are attached to
            are immediately modified to reflect data of the plot. If 
            AutoScaleAutoGeneratedAxes is true when a plot is added, the axes will
            be turned in to auto scaling ones if they are not already [tick marks,
            tick text and label size scaled to size of plot surface]. If false,
            axes will not be autoscaling.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.TitleColor">
            <summary>
            Sets the title to be drawn using a solid brush of this color.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.TitleBrush">
            <summary>
            The brush used for drawing the title.
            </summary>
        </member>
        <member name="P:NPlot.Web.PlotSurface2D.Drawables">
            <summary>
            Gets an array list containing all drawables currently added to the PlotSurface2D.
            </summary>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D">
            <summary>
            A Windows.Forms PlotSurface2D control.
            </summary>
            <remarks>
            Unfortunately it's not possible to derive from both Control and NPlot.PlotSurface2D.
            </remarks>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
            <remarks>Modified! :-)</remarks>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            the key down callback
            </summary>
            <param name="e">information pertaining to the event</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            The key up callback.
            </summary>
            <param name="e">information pertaining to the event</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            the paint event callback.
            </summary>
            <param name="pe">the PaintEventArgs</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.DoPaint(System.Windows.Forms.PaintEventArgs,System.Int32,System.Int32)">
            <summary>
            All functionality of the OnPaint method is provided by this function.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="pe">the PaintEventArgs from paint event.</param>
            <param name="width">width of the control</param>
            <param name="height">height of the control</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the plot surface on the supplied graphics surface [not the control surface].
            </summary>
            <param name="g">The graphics surface on which to draw</param>
            <param name="bounds">A bounding box on this surface that denotes the area on the
            surface to confine drawing to.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.drawDesignMode(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw a lightweight representation of us for design mode.
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Clear">
            <summary>
            Clears the plot and resets to default values.
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Add(NPlot.IDrawable)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Add(NPlot.IDrawable,NPlot.PlotSurface2D.XAxisPosition,NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Add(NPlot.IDrawable,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Add(NPlot.IDrawable,NPlot.PlotSurface2D.XAxisPosition,NPlot.PlotSurface2D.YAxisPosition,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse down event handler.
            </summary>
            <param name="e">the event args.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.DoMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            All functionality of the OnMouseDown function is contained here.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="e">The mouse event args from the window we are drawing to.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse Wheel event handler.
            </summary>
            <param name="e">the event args</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.DoMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            All functionality of the OnMouseWheel function is containd here.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="e">the event args.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.DoMouseMove(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            All functionality of the OnMouseMove function is contained here.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="e">The mouse event args from the window we are drawing to.</param>
            <param name="ctr">The control that the mouse event happened in.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseMove event handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.OnMouseLeave(System.EventArgs)">
            <summary>
            MouseLeave event handler. It has to invalidate the control to get rid of
            any remnant of vertical and horizontal guides.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.DoMouseLeave(System.EventArgs,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.DoMouseUp(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            All functionality of the OnMouseUp function is contained here.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="e">The mouse event args from the window we are drawing to.</param>
            <param name="ctr">The control that the mouse event happened in.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            mouse up event handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.OriginalDimensions">
            <summary>
            sets axes to be those saved in the cache.
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.AddAxesConstraint(NPlot.AxesConstraint)">
            <summary>
            Add an axis constraint to the plot surface. Axis constraints can
            specify relative world-pixel scalings, absolute axis positions etc.
            </summary>
            <param name="c">The axis constraint to add.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Print(System.Boolean)">
            <summary>
            Print the chart as currently shown by the control
            </summary>
            <param name="preview">If true, show print preview window.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.CopyToClipboard">
            <summary>
            Coppies the chart currently shown in the control to the clipboard as an image.
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.CopyDataToClipboard">
            <summary>
            Coppies data in the current plot surface view window to the clipboard
            as text.
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Remove(NPlot.IDrawable,System.Boolean)">
            <summary>
            Remove a drawable object from the plot surface.
            </summary>
            <param name="p">the drawable to remove</param>
            <param name="updateAxes">whether or not to update the axes after removing the idrawable.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.CacheAxes">
            <summary>
            Remembers the current axes - useful in interactions.
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.AddInteraction(NPlot.Windows.PlotSurface2D.Interactions.Interaction)">
            <summary>
            Adds and interaction to the plotsurface that adds functionality that responds 
            to a set of mouse / keyboard events. 
            </summary>
            <param name="i">the interaction to add.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.RemoveInteraction(NPlot.Windows.PlotSurface2D.Interactions.Interaction)">
            <summary>
            Remove a previously added interaction
            </summary>
            <param name="i">interaction to remove</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.OnInteractionOccured(System.Object)">
            <summary>
            Default function called when plotsurface modifying interaction occured. 
            
            Override this, or add method to InteractionOccured event.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.OnPreRefresh(System.Object)">
            <summary>
            Default function called just before a refresh happens.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.ShowCoordinates">
            <summary>
            Flag to display a coordinates in a tooltip.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.Legend">
            <summary>
            Gets or Sets the legend to use with this plot surface.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.LegendZOrder">
            <summary>
            Gets or Sets the legend z-order.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.AutoScaleTitle">
            <summary>
            Whether or not the title will be scaled according to size of the plot 
            surface.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.AutoScaleAutoGeneratedAxes">
            <summary>
            When plots are added to the plot surface, the axes they are attached to
            are immediately modified to reflect data of the plot. If 
            AutoScaleAutoGeneratedAxes is true when a plot is added, the axes will
            be turned in to auto scaling ones if they are not already [tick marks,
            tick text and label size scaled to size of plot surface]. If false,
            axes will not be autoscaling.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.Title">
            <summary>
            The plot surface title.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.TitleFont">
            <summary>
            The font used to draw the title.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.Padding">
            <summary>
            Padding of this width will be left between what is drawn and the control border.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.XAxis1">
            <summary>
            The first abscissa axis.
            </summary>
            
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.YAxis1">
            <summary>
            The first ordinate axis.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.XAxis2">
            <summary>
            The second abscissa axis.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.YAxis2">
            <summary>
            The second ordinate axis.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PhysicalXAxis1Cache">
            <summary>
            The physical XAxis1 that was last drawn.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PhysicalYAxis1Cache">
            <summary>
            The physical YAxis1 that was last drawn.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PhysicalXAxis2Cache">
            <summary>
            The physical XAxis2 that was last drawn.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PhysicalYAxis2Cache">
            <summary>
            The physical YAxis2 that was last drawn.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PlotBackColor">
            <summary>
            A color used to paint the plot background. Mutually exclusive with PlotBackImage and PlotBackBrush
            </summary>
            <remarks>not browsable or bindable because only set method.</remarks>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PlotBackImage">
            <summary>
            An imaged used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
            <remarks>not browsable or bindable because only set method.</remarks>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PlotBackBrush">
            <summary>
            A Rectangle brush used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
            <remarks>not browsable or bindable because only set method.</remarks>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.TitleColor">
            <summary>
            Sets the title to be drawn using a solid brush of this color.
            </summary>
            <remarks>not browsable or bindable because only set method.</remarks>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.TitleBrush">
            <summary>
            The brush used for drawing the title.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.SmoothingMode">
            <summary>
            Set smoothing mode for drawing plot objects.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.DateTimeToolTip">
            <summary>
            When true, tool tip will display x value as a DateTime. Quick hack - this will probably be 
            changed at some point.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.Drawables">
            <summary>
            Gets an array list containing all drawables currently added to the PlotSurface2D.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.RightMenu">
            <summary>
            Sets the right context menu. Custom menus can be designed by overriding
            NPlot.Windows.PlotSurface2D.ContextMenu.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.DefaultContextMenu">
            <summary>
            Gets an instance of a NPlot.Windows.PlotSurface2D.ContextMenu that
            is useful in typical situations.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.Inner">
            <summary>
            Allows access to the PlotSurface2D.
            </summary>
        </member>
        <member name="E:NPlot.Windows.PlotSurface2D.InteractionOccured">
            <summary>
            Event is fired when an interaction happens with the plot that causes it to be modified.
            </summary>
        </member>
        <member name="E:NPlot.Windows.PlotSurface2D.PreRefresh">
            <summary>
            Event fired when we are about to paint.
            </summary>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.Interactions">
            <summary>
            Encapsulates a number of separate "Interactions". An interaction is basically 
            a set of handlers for mouse and keyboard events that work together in a 
            specific way. 
            </summary>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.Interactions.Interaction">
            <summary>
            Base class for an interaction. All methods are virtual. Not abstract as not all interactions
            need to use all methods. Default functionality for each method is to do nothing. 
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.Interaction.DoMouseDown(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            Handler for this interaction if a mouse down event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <returns>true if plot surface needs refreshing.</returns>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.Interaction.DoMouseUp(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            Handler for this interaction if a mouse up event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <returns>true if plot surface needs refreshing.</returns>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.Interaction.DoMouseMove(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handler for this interaction if a mouse move event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <param name="lastKeyEventArgs"></param>
            <returns>true if plot surface needs refreshing.</returns>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.Interaction.DoMouseWheel(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            Handler for this interaction if a mouse move event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <returns>true if plot surface needs refreshing.</returns>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.Interaction.DoMouseLeave(System.EventArgs,System.Windows.Forms.Control)">
            <summary>
            Handler for this interaction if a mouse Leave event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <returns>true if the plot surface needs refreshing.</returns>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.Interaction.DoPaint(System.Windows.Forms.PaintEventArgs,System.Int32,System.Int32)">
            <summary>
            Handler for this interaction if a paint event is received.
            </summary>
            <param name="pe">paint event args</param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.Interactions.RubberBandSelection">
            <summary>
            
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.RubberBandSelection.DoMouseDown(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.RubberBandSelection.DoMouseMove(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.RubberBandSelection.DoMouseUp(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.RubberBandSelection.DrawRubberBand(System.Drawing.Point,System.Drawing.Point,System.Windows.Forms.Control)">
            <summary>
            Draws a rectangle representing selection area. 
            </summary>
            <param name="start">a corner of the rectangle.</param>
            <param name="end">a corner of the rectangle diagonally opposite the first.</param>
            <param name="ctr">The control to draw to - this may not be us, if we have
            been contained by a PlotSurface.</param>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.Interactions.HorizontalGuideline">
            <summary>
            Horizontal line interaction
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.HorizontalGuideline.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.HorizontalGuideline.#ctor(System.Drawing.Color)">
            <summary>
            Constructor
            </summary>
            <param name="lineColor"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.HorizontalGuideline.DoPaint(System.Windows.Forms.PaintEventArgs,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pe"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.HorizontalGuideline.DoMouseMove(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.HorizontalGuideline.DoMouseLeave(System.EventArgs,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <returns></returns>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.Interactions.VerticalGuideline">
            <summary>
            
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.VerticalGuideline.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.VerticalGuideline.#ctor(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="lineColor"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.VerticalGuideline.DoPaint(System.Windows.Forms.PaintEventArgs,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pe"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.VerticalGuideline.DoMouseMove(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.VerticalGuideline.DoMouseLeave(System.EventArgs,System.Windows.Forms.Control)">
            <summary>
            Handler for mouse leave event
            </summary>
            <param name="e">event args</param>
            <param name="ctr"></param>
            <returns></returns>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.Interactions.HorizontalDrag">
            <summary>
            
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.HorizontalDrag.DoMouseDown(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.HorizontalDrag.DoMouseMove(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.HorizontalDrag.DoMouseUp(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.Interactions.VerticalDrag">
            <summary>
            
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.VerticalDrag.DoMouseDown(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.VerticalDrag.DoMouseMove(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.VerticalDrag.DoMouseUp(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.Interactions.HorizontalRangeSelection">
            <summary>
            This plot intraction allows the user to select horizontal regions.
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.HorizontalRangeSelection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.HorizontalRangeSelection.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="smallestAllowedRange">the smallest distance between the selected xmin and xmax for the selection to be performed.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.HorizontalRangeSelection.DoMouseDown(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            Handler for mouse down event for this interaction
            </summary>
            <param name="e">the mouse event args</param>
            <param name="ctr">the plot surface this event applies to</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.HorizontalRangeSelection.DoMouseMove(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handler for mouse move event for this interaction
            </summary>
            <param name="e">the mouse event args</param>
            <param name="ctr">the plot surface this event applies to</param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.HorizontalRangeSelection.DoMouseUp(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            Handler for mouse up event for this interaction
            </summary>
            <param name="e">the mouse event args</param>
            <param name="ctr">the plot surface this event applies to</param>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.Interactions.HorizontalRangeSelection.MinimumPixelDistanceForSelect">
            <summary>
            The minimum width of the selected region (in pixels) for the interaction to zoom.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.Interactions.HorizontalRangeSelection.SmallestAllowedRange">
            <summary>
            The smallest range (distance between world min and world max) selectable.
            If a smaller region is selected, the selection will do nothing.
            </summary>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.Interactions.AxisDrag">
            <summary>
            
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.AxisDrag.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="enableDragWithCtr"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.AxisDrag.DoMouseDown(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.AxisDrag.DoMouseMove(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.AxisDrag.DoMouseUp(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.Interactions.AxisDrag.Sensitivity">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.Interactions.MouseWheelZoom">
            <summary>
            
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.MouseWheelZoom.DoMouseUp(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.MouseWheelZoom.DoMouseDown(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.Interactions.MouseWheelZoom.DoMouseWheel(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.Interactions.MouseWheelZoom.Sensitivity">
            <summary>
            Number of screen pixels equivalent to one wheel step.
            </summary>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.InteractionHandler">
            <summary>
            This is the signature of the function used for InteractionOccurred events.
            
            TODO: expand this to include information about the event. 
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.PreRefreshHandler">
            <summary>
            This is the signature of the function used for PreRefresh events.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.PlotContextMenu">
            <summary>
            Summary description for ContextMenu.
            </summary>
        </member>
        <member name="F:NPlot.Windows.PlotSurface2D.PlotContextMenu.plotSurface2D_">
            <summary>
            The PlotSurface2D associated with the context menu. Classes inherited
            from PlotContextMenu will likely use this to implement their functionality.
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.PlotContextMenu.SetMenuItems(System.Collections.ArrayList)">
            <summary>
            Sets the context menu according to the IPlotMenuItem's in the provided
            ArrayList. The current menu items can be obtained using the MenuItems
            property and extended if desired.
            </summary>
            <param name="menuItems"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.PlotContextMenu.#ctor">
            <summary>
            Constructor creates
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PlotContextMenu.MenuItems">
            <summary>
            Gets an arraylist of all PlotMenuItems that comprise the
            menu. If this list is changed, this class must be told to
            update using the Update method.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotSurface2D">
            <summary>
            The PlotSurface2D associated with the context menu. Generally, the user
            should not set this. It is used internally by PlotSurface2D.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PlotContextMenu.Menu">
            <summary>
            Gets the Windows.Forms context menu managed by this object.
            </summary>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.PlotContextMenu.IPlotMenuItem">
            <summary>
            elements of the MenuItems array list must implement this interface.
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.PlotContextMenu.IPlotMenuItem.OnPopup(NPlot.Windows.PlotSurface2D.PlotContextMenu)">
            <summary>
            This method is called for each menu item before the menu is 
            displayed. It is useful for implementing check marks, disabling
            etc.
            </summary>
            <param name="plotContextMenu"></param>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PlotContextMenu.IPlotMenuItem.MenuItem">
            <summary>
            Gets the Windows.Forms.MenuItem associated with the PlotMenuItem
            </summary>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotMenuSeparator">
            <summary>
            A plot menu item for separators.
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotMenuSeparator.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotMenuSeparator.OnPopup(NPlot.Windows.PlotSurface2D.PlotContextMenu)">
            <summary>
            
            </summary>
            <param name="plotContextMenu"></param>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotMenuSeparator.Index">
            <summary>
            Index of this menu item in the menu.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotMenuSeparator.MenuItem">
            <summary>
            The Windows.Forms.MenuItem associated with this IPlotMenuItem
            </summary>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotMenuItem">
            <summary>
            A Plot menu item suitable for specifying basic menu items
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotMenuItem.#ctor(System.String,System.Int32,System.EventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="text">Menu item text</param>
            <param name="index">Index in the manu</param>
            <param name="callback">EventHandler to call if menu selected.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotMenuItem.OnPopup(NPlot.Windows.PlotSurface2D.PlotContextMenu)">
            <summary>
            Called before menu drawn.
            </summary>
            <param name="plotContextMenu">The plot menu this item is a member of.</param>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotMenuItem.Text">
            <summary>
            The text to put in the menu for this menu item.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotMenuItem.Index">
            <summary>
            Index of this menu item in the menu.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotMenuItem.Callback">
            <summary>
            EventHandler to call if menu selected.
            </summary>
        </member>
        <member name="P:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotMenuItem.MenuItem">
            <summary>
            The Windows.Forms.MenuItem associated with this IPlotMenuItem
            </summary>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotZoomBackMenuItem">
            <summary>
            A Plot Menu Item that provides necessary functionality for the
            zoom back menu item (graying out if zoomed right out in addition
            to basic functionality).
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotZoomBackMenuItem.#ctor(System.String,System.Int32,System.EventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="text">Text associated with this item in the menu.</param>
            <param name="index">Index of this item in the menu.</param>
            <param name="callback">EventHandler to call when menu item is selected.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotZoomBackMenuItem.OnPopup(NPlot.Windows.PlotSurface2D.PlotContextMenu)">
            <summary>
            Called before menu drawn.
            </summary>
            <param name="plotContextMenu">The plot menu this item is a member of.</param>
        </member>
        <member name="T:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotShowCoordinatesMenuItem">
            <summary>
            A Plot Menu Item that provides necessary functionality for the
            show coordinates menu item (tick mark toggle in addition to basic
            functionality).
            </summary>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotShowCoordinatesMenuItem.#ctor(System.String,System.Int32,System.EventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="text">Text associated with this item in the menu.</param>
            <param name="index">Index of this item in the menu.</param>
            <param name="callback">EventHandler to call when menu item is selected.</param>
        </member>
        <member name="M:NPlot.Windows.PlotSurface2D.PlotContextMenu.PlotShowCoordinatesMenuItem.OnPopup(NPlot.Windows.PlotSurface2D.PlotContextMenu)">
            <summary>
            Called before menu drawn.
            </summary>
            <param name="plotContextMenu">The plot menu this item is a member of.</param>
        </member>
    </members>
</doc>
