<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Troschuetz.Random</name>
    </assembly>
    <members>
        <member name="T:Troschuetz.Random.ExponentialDistribution">
            <summary>
            Provides generation of exponential distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.ExponentialDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Exponential_distribution">Wikipedia - Exponential distribution</a>.
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Distribution">
            <summary>
            Declares common functionality for all random number distributions.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.Distribution.generator">
            <summary>
            Stores a <see cref="P:Troschuetz.Random.Distribution.Generator"/> object that can be used as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.Distribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Distribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.Distribution"/> class, using the specified 
              <see cref="P:Troschuetz.Random.Distribution.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="P:Troschuetz.Random.Distribution.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.Distribution.Reset">
            <summary>
            Resets the random number distribution, so that it produces the same random number sequence again.
            </summary>
            <returns>
            <see langword="true"/>, if the random number distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Distribution.NextDouble">
            <summary>
            Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.Distribution.Generator">
            <summary>
            Gets or sets a <see cref="P:Troschuetz.Random.Distribution.Generator"/> object that can be used as underlying random number generator.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distribution.CanReset">
            <summary>
            Gets a value indicating whether the random number distribution can be reset, so that it produces the same 
              random number sequence again.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distribution.Minimum">
            <summary>
            Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distribution.Maximum">
            <summary>
            Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distribution.Mean">
            <summary>
            Gets the mean of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distribution.Median">
            <summary>
            Gets the median of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distribution.Variance">
            <summary>
            Gets the variance of distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Distribution.Mode">
            <summary>
            Gets the mode of distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ExponentialDistribution.lambda">
            <summary>
            Stores the parameter lambda which is used for generation of exponential distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ExponentialDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of exponential distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.ExponentialDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.ExponentialDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.ExponentialDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ExponentialDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.ExponentialDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.ExponentialDistribution.IsValidLambda(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ExponentialDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ExponentialDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of exponential distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ExponentialDistribution.NextDouble">
            <summary>
            Returns a exponential distributed floating point random number.
            </summary>
            <returns>A exponential distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.ExponentialDistribution.Lambda">
            <summary>
            Gets or sets the parameter lambda which is used for generation of exponential distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.ExponentialDistribution.IsValidLambda(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.ExponentialDistribution.Minimum">
            <summary>
            Gets the minimum possible value of exponential distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ExponentialDistribution.Maximum">
            <summary>
            Gets the maximum possible value of exponential distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ExponentialDistribution.Mean">
            <summary>
            Gets the mean value of exponential distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ExponentialDistribution.Median">
            <summary>
            Gets the median of exponential distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ExponentialDistribution.Variance">
            <summary>
            Gets the variance of exponential distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ExponentialDistribution.Mode">
            <summary>
            Gets the mode of exponential distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.FisherSnedecorDistribution">
            <summary>
            Provides generation of Fisher-Snedecor distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.FisherSnedecorDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/F-distribution">Wikipedia - F-distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.FisherSnedecorDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of Fisher-Snedecor distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.FisherSnedecorDistribution.beta">
            <summary>
            Stores the parameter beta which is used for generation of Fisher-Snedecor distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.FisherSnedecorDistribution.chiSquareDistributionAlpha">
            <summary>
            Stores a <see cref="T:Troschuetz.Random.ChiSquareDistribution"/> object used for generation of Fisher-Snedecor distributed random 
              numbers and configured with parameter <see cref="F:Troschuetz.Random.FisherSnedecorDistribution.alpha"/>.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.FisherSnedecorDistribution.chiSquareDistributionBeta">
            <summary>
            Stores a <see cref="T:Troschuetz.Random.ChiSquareDistribution"/> object used for generation of Fisher-Snedecor distributed random 
              numbers and configured with parameter <see cref="F:Troschuetz.Random.FisherSnedecorDistribution.beta"/>.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.FisherSnedecorDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of Fisher-Snedecor distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.FisherSnedecorDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.FisherSnedecorDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.FisherSnedecorDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.FisherSnedecorDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.FisherSnedecorDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.FisherSnedecorDistribution.IsValidAlpha(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.FisherSnedecorDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.FisherSnedecorDistribution.IsValidBeta(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.FisherSnedecorDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.FisherSnedecorDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of Fisher-Snedecor distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.FisherSnedecorDistribution.Reset">
            <summary>
            Resets the Fisher-Snedecor distribution, so that it produces the same random number sequence again.
            </summary>
            <returns>
            <see langword="true"/>, if the Fisher-Snedecor distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.FisherSnedecorDistribution.NextDouble">
            <summary>
            Returns a Fisher-Snedecor distributed floating point random number.
            </summary>
            <returns>A Fisher-Snedecor distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.FisherSnedecorDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of Fisher-Snedecor distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.FisherSnedecorDistribution.IsValidAlpha(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.FisherSnedecorDistribution.Beta">
            <summary>
            Gets or sets the parameter beta which is used for generation of Fisher-Snedecor distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.FisherSnedecorDistribution.IsValidBeta(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.FisherSnedecorDistribution.Minimum">
            <summary>
            Gets the minimum possible value of Fisher-Snedecor distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.FisherSnedecorDistribution.Maximum">
            <summary>
            Gets the maximum possible value of Fisher-Snedecor distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.FisherSnedecorDistribution.Mean">
            <summary>
            Gets the mean value of Fisher-Snedecor distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.FisherSnedecorDistribution.Median">
            <summary>
            Gets the median of Fisher-Snedecor distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.FisherSnedecorDistribution.Variance">
            <summary>
            Gets the variance of Fisher-Snedecor distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.FisherSnedecorDistribution.Mode">
            <summary>
            Gets the mode of Fisher-Snedecor distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.BetaDistribution">
            <summary>
            Provides generation of beta distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.BetaDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Beta_distribution">Wikipedia - Beta distribution</a> and
              <a href="http://www.xycoon.com/beta_randomnumbers.htm">Xycoon - Beta Distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.BetaDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of beta distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.BetaDistribution.beta">
            <summary>
            Stores the parameter beta which is used for generation of beta distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.BetaDistribution.gammaDistributionAlpha">
            <summary>
            Stores a <see cref="T:Troschuetz.Random.GammaDistribution"/> object used for generation of beta distributed random numbers
              and configured with parameter <see cref="F:Troschuetz.Random.BetaDistribution.alpha"/>.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.BetaDistribution.gammaDistributionBeta">
            <summary>
            Stores a <see cref="T:Troschuetz.Random.GammaDistribution"/> object used for generation of beta distributed random numbers
              and configured with parameter <see cref="F:Troschuetz.Random.BetaDistribution.beta"/>.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.BetaDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.BetaDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.BetaDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.BetaDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.BetaDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.BetaDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.BetaDistribution.IsValidBeta(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.BetaDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.BetaDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of beta distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.BetaDistribution.Reset">
            <summary>
            Resets the beta distribution, so that it produces the same random number sequence again.
            </summary>
            <returns>
            <see langword="true"/>, if the beta distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.BetaDistribution.NextDouble">
            <summary>
            Returns a beta distributed floating point random number.
            </summary>
            <returns>A beta distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.BetaDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of beta distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.BetaDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.BetaDistribution.Beta">
            <summary>
            Gets or sets the parameter beta which is used for generation of beta distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.BetaDistribution.IsValidBeta(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.BetaDistribution.Minimum">
            <summary>
            Gets the minimum possible value of beta distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BetaDistribution.Maximum">
            <summary>
            Gets the maximum possible value of beta distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BetaDistribution.Mean">
            <summary>
            Gets the mean value of beta distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BetaDistribution.Median">
            <summary>
            Gets the median of beta distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BetaDistribution.Variance">
            <summary>
            Gets the variance of beta distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BetaDistribution.Mode">
            <summary>
            Gets the mode of beta distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.XorShift128Generator">
            <summary>
            Represents a xorshift pseudo-random number generator with period 2^128-1.
            </summary>
            <remarks>
            The <see cref="T:Troschuetz.Random.XorShift128Generator"/> type bases upon the implementation presented in the CP article
              "<a href="http://www.codeproject.com/csharp/fastrandom.asp">A fast equivalent for System.Random</a>"
              and the theoretical background on xorshift random number generators published by George Marsaglia 
              in this paper "<a href="http://www.jstatsoft.org/v08/i14/xorshift.pdf">Xorshift RNGs</a>".
            </remarks>
        </member>
        <member name="T:Troschuetz.Random.Generator">
            <summary>
            Declares common functionality for all random number generators.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.Generator.Reset">
            <summary>
            Resets the random number generator, so that it produces the same random number sequence again.
            </summary>
            <returns>
            <see langword="true"/>, if the random number generator was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generator.Next">
            <summary>
            Returns a nonnegative random number less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <see cref="F:System.Int32.MaxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generator.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generator.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0. 
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generator.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0.0. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than <paramref name="maxValue"/>; 
              that is, the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generator.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            </returns>
        </member>
        <member name="M:Troschuetz.Random.Generator.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            Buffers 31 random bits for future calls, so the random number generator is only invoked once in every 31 calls.
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Troschuetz.Random.Generator.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="P:Troschuetz.Random.Generator.CanReset">
            <summary>
            Gets a value indicating whether the random number generator can be reset, so that it produces the same 
              random number sequence again.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.XorShift128Generator.SeedY">
            <summary>
            Represents the seed for the <see cref="F:Troschuetz.Random.XorShift128Generator.y"/> variable. This field is constant.
            </summary>
            <remarks>The value of this constant is 362436069.</remarks>
        </member>
        <member name="F:Troschuetz.Random.XorShift128Generator.SeedZ">
            <summary>
            Represents the seed for the <see cref="F:Troschuetz.Random.XorShift128Generator.z"/> variable. This field is constant.
            </summary>
            <remarks>The value of this constant is 521288629.</remarks>
        </member>
        <member name="F:Troschuetz.Random.XorShift128Generator.SeedW">
            <summary>
            Represents the seed for the <see cref="F:Troschuetz.Random.XorShift128Generator.w"/> variable. This field is constant.
            </summary>
            <remarks>The value of this constant is 88675123.</remarks>
        </member>
        <member name="F:Troschuetz.Random.XorShift128Generator.IntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0 when it gets applied to a nonnegative 32-bit signed integer.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.XorShift128Generator.UIntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0  when it gets applied to a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.XorShift128Generator.x">
            <summary>
            Stores the last but three unsigned random number. 
            </summary>
        </member>
        <member name="F:Troschuetz.Random.XorShift128Generator.y">
            <summary>
            Stores the last but two unsigned random number. 
            </summary>
        </member>
        <member name="F:Troschuetz.Random.XorShift128Generator.z">
            <summary>
            Stores the last but one unsigned random number. 
            </summary>
        </member>
        <member name="F:Troschuetz.Random.XorShift128Generator.w">
            <summary>
            Stores the last generated unsigned random number. 
            </summary>
        </member>
        <member name="F:Troschuetz.Random.XorShift128Generator.seed">
            <summary>
            Stores the used seed value.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.XorShift128Generator.bitBuffer">
            <summary>
            Stores an <see cref="T:System.UInt32"/> used to generate up to 32 random <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.XorShift128Generator.bitCount">
            <summary>
            Stores how many random <see cref="T:System.Boolean"/> values still can be generated from <see cref="F:Troschuetz.Random.XorShift128Generator.bitBuffer"/>.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.XorShift128Generator"/> class, using a time-dependent default 
              seed value.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.XorShift128Generator"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number sequence.
            If a negative number is specified, the absolute value of the number is used. 
            </param>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.XorShift128Generator"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.ResetGenerator">
            <summary>
            Resets the <see cref="T:Troschuetz.Random.XorShift128Generator"/>, so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.NextUInt">
            <summary>
            Returns an unsigned random number.
            </summary>
            <returns>
            A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and 
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.NextInclusiveMaxValue">
            <summary>
            Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than or equal to <see cref="F:System.Int32.MaxValue"/>; 
              that is, the range of return values includes 0 and <paramref name="Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.Reset">
            <summary>
            Resets the <see cref="T:Troschuetz.Random.XorShift128Generator"/>, so that it produces the same pseudo-random number sequence again.
            </summary>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.Next">
            <summary>
            Returns a nonnegative random number less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <see cref="F:System.Int32.MaxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0.0. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than <paramref name="maxValue"/>; 
              that is, the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> is greater than
              <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            <remarks>
            Buffers 32 random bits (1 uint) for future calls, so a new random number is only generated every 32 calls.
            </remarks>
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Troschuetz.Random.XorShift128Generator.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is a null reference (<see langword="Nothing"/> in Visual Basic). 
            </exception>
        </member>
        <member name="P:Troschuetz.Random.XorShift128Generator.CanReset">
            <summary>
            Gets a value indicating whether the <see cref="T:Troschuetz.Random.XorShift128Generator"/> can be reset, so that it produces the 
              same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.DiscreteUniformDistribution">
            <summary>
            Provides generation of discrete uniformly distributed random numbers.
            </summary>
            <remarks>
            The discrete uniform distribution generates only discrete numbers.<br/>
            The implementation of the <see cref="T:Troschuetz.Random.DiscreteUniformDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28discrete%29">
              Wikipedia - Uniform distribution (discrete)</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.DiscreteUniformDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.DiscreteUniformDistribution.beta">
            <summary>
            Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.DiscreteUniformDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of uniformly distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.DiscreteUniformDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.DiscreteUniformDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.DiscreteUniformDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator. 
            </summary>
        </member>
        <member name="M:Troschuetz.Random.DiscreteUniformDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.DiscreteUniformDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.DiscreteUniformDistribution.IsValidAlpha(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.DiscreteUniformDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is less than or equal to <see cref="P:Troschuetz.Random.DiscreteUniformDistribution.Beta"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.DiscreteUniformDistribution.IsValidBeta(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.DiscreteUniformDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than or equal to <see cref="P:Troschuetz.Random.DiscreteUniformDistribution.Alpha"/>, and less than 
              <see cref="F:System.Int32.MaxValue"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.DiscreteUniformDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of uniformly distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.DiscreteUniformDistribution.Next">
            <summary>
            Returns a uniformly distributed random number.
            </summary>
            <returns>A geometric distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:Troschuetz.Random.DiscreteUniformDistribution.NextDouble">
            <summary>
            Returns a uniformly distributed floating point random number.
            </summary>
            <returns>A uniformly distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.DiscreteUniformDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of uniformly distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.DiscreteUniformDistribution.IsValidAlpha(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.DiscreteUniformDistribution.Beta">
            <summary>
            Gets or sets the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.DiscreteUniformDistribution.IsValidBeta(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.DiscreteUniformDistribution.Minimum">
            <summary>
            Gets the minimum possible value of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.DiscreteUniformDistribution.Maximum">
            <summary>
            Gets the maximum possible value of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.DiscreteUniformDistribution.Mean">
            <summary>
            Gets the mean value of the uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.DiscreteUniformDistribution.Median">
            <summary>
            Gets the median of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.DiscreteUniformDistribution.Variance">
            <summary>
            Gets the variance of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.DiscreteUniformDistribution.Mode">
            <summary>
            Gets the mode of the uniformly distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.ContinuousUniformDistribution">
            <summary>
            Provides generation of continuous uniformly distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.ContinuousUniformDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29">
              Wikipedia - Uniform distribution (continuous)</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.ContinuousUniformDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ContinuousUniformDistribution.beta">
            <summary>
            Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ContinuousUniformDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of uniformly distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.ContinuousUniformDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.ContinuousUniformDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.ContinuousUniformDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator. 
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ContinuousUniformDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.ContinuousUniformDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.ContinuousUniformDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ContinuousUniformDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is less than or equal to <see cref="P:Troschuetz.Random.ContinuousUniformDistribution.Beta"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ContinuousUniformDistribution.IsValidBeta(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ContinuousUniformDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than or equal to <see cref="P:Troschuetz.Random.ContinuousUniformDistribution.Alpha"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ContinuousUniformDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of uniformly distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ContinuousUniformDistribution.NextDouble">
            <summary>
            Returns a uniformly distributed floating point random number.
            </summary>
            <returns>A uniformly distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.ContinuousUniformDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of uniformly distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.ContinuousUniformDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.ContinuousUniformDistribution.Beta">
            <summary>
            Gets or sets the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.ContinuousUniformDistribution.IsValidBeta(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.ContinuousUniformDistribution.Minimum">
            <summary>
            Gets the minimum possible value of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ContinuousUniformDistribution.Maximum">
            <summary>
            Gets the maximum possible value of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ContinuousUniformDistribution.Mean">
            <summary>
            Gets the mean value of the uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ContinuousUniformDistribution.Median">
            <summary>
            Gets the median of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ContinuousUniformDistribution.Variance">
            <summary>
            Gets the variance of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ContinuousUniformDistribution.Mode">
            <summary>
            Gets the mode of the uniformly distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.RayleighDistribution">
            <summary>
            Provides generation of rayleigh distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.RayleighDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Rayleigh_distribution">Wikipedia - Rayleigh Distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.RayleighDistribution.sigma">
            <summary>
            Stores the parameter sigma which is used for generation of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.RayleighDistribution.normalDistribution1">
            <summary>
            Stores first <see cref="T:Troschuetz.Random.NormalDistribution"/> object used for generation of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.RayleighDistribution.normalDistribution2">
            <summary>
            Stores second <see cref="T:Troschuetz.Random.NormalDistribution"/> object used for generation of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.RayleighDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.RayleighDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.RayleighDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.RayleighDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.RayleighDistribution.IsValidSigma(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.RayleighDistribution.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.RayleighDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of rayleigh distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.RayleighDistribution.Reset">
            <summary>
            Resets the chi distribution, so that it produces the same random number sequence again.
            </summary>
            <returns>
            <see langword="true"/>, if the chi distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.RayleighDistribution.NextDouble">
            <summary>
            Returns a rayleigh distributed floating point random number.
            </summary>
            <returns>A rayleigh distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.RayleighDistribution.Sigma">
            <summary>
            Gets or sets the parameter sigma which is used for generation of rayleigh distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.RayleighDistribution.IsValidSigma(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.RayleighDistribution.Minimum">
            <summary>
            Gets the minimum possible value of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.RayleighDistribution.Maximum">
            <summary>
            Gets the maximum possible value of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.RayleighDistribution.Mean">
            <summary>
            Gets the mean value of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.RayleighDistribution.Median">
            <summary>
            Gets the median of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.RayleighDistribution.Variance">
            <summary>
            Gets the variance of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.RayleighDistribution.Mode">
            <summary>
            Gets the mode of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.BinomialDistribution">
            <summary>
            Provides generation of binomial distributed random numbers.
            </summary>
            <remarks>
            The binomial distribution generates only discrete numbers.<br/>
            The implementation of the <see cref="T:Troschuetz.Random.BinomialDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/binomial_distribution">Wikipedia - Binomial distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.BinomialDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of binomial distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.BinomialDistribution.beta">
            <summary>
            Stores the parameter beta which is used for generation of binomial distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.BinomialDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.BinomialDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.BinomialDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.BinomialDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.BinomialDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.BinomialDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than or equal to 0.0, and less than or equal to 1.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.BinomialDistribution.IsValidBeta(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.BinomialDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than or equal to 0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.BinomialDistribution.Next">
            <summary>
            Returns a binomial distributed random number.
            </summary>
            <returns>A binomial distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:Troschuetz.Random.BinomialDistribution.NextDouble">
            <summary>
            Returns a binomial distributed floating point random number.
            </summary>
            <returns>A binomial distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.BinomialDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of binomial distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.BinomialDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.BinomialDistribution.Beta">
            <summary>
            Gets or sets the parameter beta which is used for generation of binomial distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.BinomialDistribution.IsValidBeta(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.BinomialDistribution.Minimum">
            <summary>
            Gets the minimum possible value of binomial distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BinomialDistribution.Maximum">
            <summary>
            Gets the maximum possible value of binomial distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BinomialDistribution.Mean">
            <summary>
            Gets the mean value of binomial distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BinomialDistribution.Median">
            <summary>
            Gets the median of binomial distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BinomialDistribution.Variance">
            <summary>
            Gets the variance of binomial distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BinomialDistribution.Mode">
            <summary>
            Gets the mode of binomial distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.ChiSquareDistribution">
            <summary>
            Provides generation of chi-square distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.ChiSquareDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Chi-square_distribution">Wikipedia - Chi-square distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.ChiSquareDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of chi-square distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ChiSquareDistribution.normalDistribution">
            <summary>
            Stores a <see cref="T:Troschuetz.Random.NormalDistribution"/> object used for generation of chi-square distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ChiSquareDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.ChiSquareDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ChiSquareDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.ChiSquareDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.ChiSquareDistribution.IsValidAlpha(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ChiSquareDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ChiSquareDistribution.Reset">
            <summary>
            Resets the chi-square distribution, so that it produces the same random number sequence again.
            </summary>
            <returns>
            <see langword="true"/>, if the chi-square distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ChiSquareDistribution.NextDouble">
            <summary>
            Returns a chi-square distributed floating point random number.
            </summary>
            <returns>A chi-square distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.ChiSquareDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of chi-square distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.ChiSquareDistribution.IsValidAlpha(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.ChiSquareDistribution.Minimum">
            <summary>
            Gets the minimum possible value of chi-square distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ChiSquareDistribution.Maximum">
            <summary>
            Gets the maximum possible value of chi-square distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ChiSquareDistribution.Mean">
            <summary>
            Gets the mean value of chi-square distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ChiSquareDistribution.Median">
            <summary>
            Gets the median of chi-square distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ChiSquareDistribution.Variance">
            <summary>
            Gets the variance of chi-square distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ChiSquareDistribution.Mode">
            <summary>
            Gets the mode of chi-square distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.ErlangDistribution">
            <summary>
            Provides generation of erlang distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.ErlangDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Erlang_distribution">Wikipedia - Erlang distribution</a> and
              <a href="http://www.xycoon.com/erlang_random.htm">Xycoon - Erlang Distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.ErlangDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of erlang distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ErlangDistribution.lambda">
            <summary>
            Stores the parameter lambda which is used for generation of erlang distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ErlangDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of erlang distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.ErlangDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.ErlangDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.ErlangDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ErlangDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.ErlangDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.ErlangDistribution.IsValidAlpha(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ErlangDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ErlangDistribution.IsValidLambda(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ErlangDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ErlangDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of erlang distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ErlangDistribution.NextDouble">
            <summary>
            Returns a erlang distributed floating point random number.
            </summary>
            <returns>A erlang distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.ErlangDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of erlang distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.ErlangDistribution.IsValidAlpha(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.ErlangDistribution.Lambda">
            <summary>
            Gets or sets the parameter lambda which is used for generation of erlang distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.ErlangDistribution.IsValidLambda(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.ErlangDistribution.Minimum">
            <summary>
            Gets the minimum possible value of erlang distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ErlangDistribution.Maximum">
            <summary>
            Gets the maximum possible value of erlang distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ErlangDistribution.Mean">
            <summary>
            Gets the mean value of erlang distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ErlangDistribution.Median">
            <summary>
            Gets the median of erlang distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ErlangDistribution.Variance">
            <summary>
            Gets the variance of erlang distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ErlangDistribution.Mode">
            <summary>
            Gets the mode of erlang distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.NormalDistribution">
            <summary>
            Provides generation of normal distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.NormalDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Normal_distribution">Wikipedia - Normal distribution</a>
              and the implementation in the <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">
              Communication Networks Class Library</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.NormalDistribution.mu">
            <summary>
            Stores the parameter mu which is used for generation of normal distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.NormalDistribution.sigma">
            <summary>
            Stores the parameter sigma which is used for generation of normal distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.NormalDistribution.helper1">
            <summary>
            Stores a precomputed normal distributed random number that will be returned the next time 
              <see cref="M:Troschuetz.Random.NormalDistribution.NextDouble"/> gets called.
            </summary>
            <remarks>
            Two new normal distributed random numbers are generated every other call to <see cref="M:Troschuetz.Random.NormalDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.NormalDistribution.helper2">
            <summary>
            Stores a value indicating whether <see cref="M:Troschuetz.Random.NormalDistribution.NextDouble"/> was called twice since last generation of 
              normal distributed random numbers.
            </summary>
            <remarks>
            Two new normal distributed random numbers are generated every other call to <see cref="M:Troschuetz.Random.NormalDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.NormalDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.NormalDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.NormalDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.NormalDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.NormalDistribution.IsValidMu(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.NormalDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.NormalDistribution.IsValidSigma(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.NormalDistribution.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.NormalDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of normal distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.NormalDistribution.Reset">
            <summary>
            Resets the normal distribution, so that it produces the same random number sequence again.
            </summary>
            <returns>
            <see langword="true"/>, if the normal distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.NormalDistribution.NextDouble">
            <summary>
            Returns a normal distributed floating point random number.
            </summary>
            <returns>A normal distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.NormalDistribution.Mu">
            <summary>
            Gets or sets the parameter mu which is used for generation of normal distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.NormalDistribution.IsValidMu(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.NormalDistribution.Sigma">
            <summary>
            Gets or sets the parameter sigma which is used for generation of normal distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.NormalDistribution.IsValidSigma(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.NormalDistribution.Minimum">
            <summary>
            Gets the minimum possible value of normal distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.NormalDistribution.Maximum">
            <summary>
            Gets the maximum possible value of normal distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.NormalDistribution.Mean">
            <summary>
            Gets the mean value of normal distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.NormalDistribution.Median">
            <summary>
            Gets the median of normal distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.NormalDistribution.Variance">
            <summary>
            Gets the variance of normal distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.NormalDistribution.Mode">
            <summary>
            Gets the mode of normal distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.BernoulliDistribution">
            <summary>
            Provides generation of bernoulli distributed random numbers.
            </summary>
            <remarks>
            The bernoulli distribution generates only discrete numbers.<br/>
            The implementation of the <see cref="T:Troschuetz.Random.BernoulliDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Bernoulli_distribution">Wikipedia - Bernoulli distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.BernoulliDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of bernoulli distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.BernoulliDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.BernoulliDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.BernoulliDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.BernoulliDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.BernoulliDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.BernoulliDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than or equal to 0.0, and less than or equal to 1.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.BernoulliDistribution.Next">
            <summary>
            Returns a bernoulli distributed random number.
            </summary>
            <returns>A bernoulli distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:Troschuetz.Random.BernoulliDistribution.NextDouble">
            <summary>
            Returns a bernoulli distributed floating point random number.
            </summary>
            <returns>A bernoulli distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.BernoulliDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of bernoulli distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.BernoulliDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.BernoulliDistribution.Minimum">
            <summary>
            Gets the minimum possible value of bernoulli distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BernoulliDistribution.Maximum">
            <summary>
            Gets the maximum possible value of bernoulli distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BernoulliDistribution.Mean">
            <summary>
            Gets the mean value of bernoulli distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BernoulliDistribution.Median">
            <summary>
            Gets the median of bernoulli distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BernoulliDistribution.Variance">
            <summary>
            Gets the variance of bernoulli distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BernoulliDistribution.Mode">
            <summary>
            Gets the mode of bernoulli distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.LognormalDistribution">
            <summary>
            Provides generation of lognormal distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.LognormalDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Log-normal_distribution">Wikipedia - Lognormal Distribution</a> and
              the implementation in the <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.LognormalDistribution.mu">
            <summary>
            Stores the parameter mu which is used for generation of lognormal distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.LognormalDistribution.sigma">
            <summary>
            Stores the parameter sigma which is used for generation of lognormal distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.LognormalDistribution.normalDistribution">
            <summary>
            Stores a <see cref="T:Troschuetz.Random.NormalDistribution"/> object used for generation of lognormal distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.LognormalDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.LognormalDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.LognormalDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.LognormalDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.LognormalDistribution.IsValidMu(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.LognormalDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.LognormalDistribution.IsValidSigma(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.LognormalDistribution.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than or equal to 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.LognormalDistribution.Reset">
            <summary>
            Resets the lognormal distribution, so that it produces the same random number sequence again.
            </summary>
            <returns>
            <see langword="true"/>, if the lognormal distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.LognormalDistribution.NextDouble">
            <summary>
            Returns a lognormal distributed floating point random number.
            </summary>
            <returns>A lognormal distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.LognormalDistribution.Mu">
            <summary>
            Gets or sets the parameter mu which is used for generation of lognormal distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.LognormalDistribution.IsValidMu(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.LognormalDistribution.Sigma">
            <summary>
            Gets or sets the parameter sigma which is used for generation of lognormal distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.LognormalDistribution.IsValidSigma(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.LognormalDistribution.Minimum">
            <summary>
            Gets the minimum possible value of lognormal distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.LognormalDistribution.Maximum">
            <summary>
            Gets the maximum possible value of lognormal distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.LognormalDistribution.Mean">
            <summary>
            Gets the mean value of lognormal distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.LognormalDistribution.Median">
            <summary>
            Gets the median of lognormal distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.LognormalDistribution.Variance">
            <summary>
            Gets the variance of lognormal distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.LognormalDistribution.Mode">
            <summary>
            Gets the mode of lognormal distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.TriangularDistribution">
            <summary>
            Provides generation of triangular distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.TriangularDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Triangular_distribution">Wikipedia - Triangular distribution</a>
              and the implementation in the <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.TriangularDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of triangular distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.TriangularDistribution.beta">
            <summary>
            Stores the parameter beta which is used for generation of triangular distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.TriangularDistribution.gamma">
            <summary>
            Stores the parameter gamma which is used for generation of triangular distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.TriangularDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of triangular distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.TriangularDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.TriangularDistribution.helper2">
            <summary>
            Stores an intermediate result for generation of triangular distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.TriangularDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.TriangularDistribution.helper3">
            <summary>
            Stores an intermediate result for generation of triangular distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.TriangularDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.TriangularDistribution.helper4">
            <summary>
            Stores an intermediate result for generation of triangular distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.TriangularDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.TriangularDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.TriangularDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.TriangularDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.TriangularDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.TriangularDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.TriangularDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is less than <see cref="P:Troschuetz.Random.TriangularDistribution.Beta"/>, and less than or equal to 
              <see cref="P:Troschuetz.Random.TriangularDistribution.Gamma"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.TriangularDistribution.IsValidBeta(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.TriangularDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than <see cref="P:Troschuetz.Random.TriangularDistribution.Alpha"/>, and greater than or equal to 
              <see cref="P:Troschuetz.Random.TriangularDistribution.Gamma"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.TriangularDistribution.IsValidGamma(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.TriangularDistribution.Gamma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than or equal to <see cref="P:Troschuetz.Random.TriangularDistribution.Alpha"/>, and greater than or equal 
              to <see cref="P:Troschuetz.Random.TriangularDistribution.Beta"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.TriangularDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of triangular distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.TriangularDistribution.NextDouble">
            <summary>
            Returns a triangular distributed floating point random number.
            </summary>
            <returns>A triangular distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.TriangularDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of triangular distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.TriangularDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.TriangularDistribution.Beta">
            <summary>
            Gets or sets the parameter beta which is used for generation of triangular distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.TriangularDistribution.IsValidBeta(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.TriangularDistribution.Gamma">
            <summary>
            Gets or sets the parameter gamma which is used for generation of triangular distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.TriangularDistribution.IsValidGamma(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.TriangularDistribution.Minimum">
            <summary>
            Gets the minimum possible value of triangular distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.TriangularDistribution.Maximum">
            <summary>
            Gets the maximum possible value of triangular distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.TriangularDistribution.Mean">
            <summary>
            Gets the mean value of triangular distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.TriangularDistribution.Median">
            <summary>
            Gets the median of triangular distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.TriangularDistribution.Variance">
            <summary>
            Gets the variance of triangular distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.TriangularDistribution.Mode">
            <summary>
            Gets the mode of triangular distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.ChiDistribution">
            <summary>
            Provides generation of chi distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.ChiDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Chi_distribution">Wikipedia - Chi distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.ChiDistribution.LanczosCoefficients">
            <summary>
            Represents coefficients for the Lanczos approximation of the Gamma function.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ChiDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of chi distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ChiDistribution.normalDistribution">
            <summary>
            Stores a <see cref="T:Troschuetz.Random.NormalDistribution"/> object used for generation of chi distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ChiDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.ChiDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ChiDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.ChiDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.ChiDistribution.IsValidAlpha(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ChiDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ChiDistribution.Gamma(System.Double)">
            <summary>
            Represents a Lanczos approximation of the Gamma function.
            </summary>
            <param name="x">A double-precision floating point number.</param>
            <returns>
            A double-precision floating point number representing an approximation of Gamma(<paramref name="x"/>).
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ChiDistribution.Reset">
            <summary>
            Resets the chi distribution, so that it produces the same random number sequence again.
            </summary>
            <returns>
            <see langword="true"/>, if the chi distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ChiDistribution.NextDouble">
            <summary>
            Returns a chi distributed floating point random number.
            </summary>
            <returns>A chi distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.ChiDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of chi distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.ChiDistribution.IsValidAlpha(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.ChiDistribution.Minimum">
            <summary>
            Gets the minimum possible value of chi distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ChiDistribution.Maximum">
            <summary>
            Gets the maximum possible value of chi distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ChiDistribution.Mean">
            <summary>
            Gets the mean value of chi distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ChiDistribution.Median">
            <summary>
            Gets the median of chi distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ChiDistribution.Variance">
            <summary>
            Gets the variance of chi distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ChiDistribution.Mode">
            <summary>
            Gets the mode of chi distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.StudentsTDistribution">
            <summary>
            Provides generation of t-distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.StudentsTDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Student%27s_t-distribution">Wikipedia - Student's t-distribution</a> and
              <a href="http://www.xycoon.com/stt_random.htm">Xycoon - Student t Distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.StudentsTDistribution.nu">
            <summary>
            Stores the parameter nu which is used for generation of t-distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.StudentsTDistribution.normalDistribution">
            <summary>
            Stores a <see cref="T:Troschuetz.Random.NormalDistribution"/> object used for generation of t-distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.StudentsTDistribution.chiSquareDistribution">
            <summary>
            Stores a <see cref="T:Troschuetz.Random.ChiSquareDistribution"/> object used for generation of t-distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.StudentsTDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.StudentsTDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.StudentsTDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.StudentsTDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.StudentsTDistribution.IsValidNu(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.StudentsTDistribution.Nu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.StudentsTDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of t-distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.StudentsTDistribution.Reset">
            <summary>
            Resets the Student's t-distribution, so that it produces the same random number sequence again.
            </summary>
            <returns>
            <see langword="true"/>, if the Student's t-distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.StudentsTDistribution.NextDouble">
            <summary>
            Returns a t-distributed floating point random number.
            </summary>
            <returns>A t-distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.StudentsTDistribution.Nu">
            <summary>
            Gets or sets the parameter nu which is used for generation of t-distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.StudentsTDistribution.IsValidNu(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.StudentsTDistribution.Minimum">
            <summary>
            Gets the minimum possible value of t-distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.StudentsTDistribution.Maximum">
            <summary>
            Gets the maximum possible value of t-distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.StudentsTDistribution.Mean">
            <summary>
            Gets the mean value of t-distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.StudentsTDistribution.Median">
            <summary>
            Gets the median of t-distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.StudentsTDistribution.Variance">
            <summary>
            Gets the variance of t-distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.StudentsTDistribution.Mode">
            <summary>
            Gets the mode of t-distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.MT19937Generator">
            <summary>
            Represents a Mersenne Twister pseudo-random number generator with period 2^19937-1.
            </summary>
            <remarks>
            The <see cref="T:Troschuetz.Random.MT19937Generator"/> type bases upon information and the implementation presented on the
              <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html">Mersenne Twister Home Page</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.MT19937Generator.N">
            <summary>
            Represents the number of unsigned random numbers generated at one time. This field is constant.
            </summary>
            <remarks>The value of this constant is 624.</remarks>
        </member>
        <member name="F:Troschuetz.Random.MT19937Generator.M">
            <summary>
            Represents a constant used for generation of unsigned random numbers. This field is constant.
            </summary>
            <remarks>The value of this constant is 397.</remarks>
        </member>
        <member name="F:Troschuetz.Random.MT19937Generator.VectorA">
            <summary>
            Represents the constant vector a. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x9908b0dfU.</remarks>
        </member>
        <member name="F:Troschuetz.Random.MT19937Generator.UpperMask">
            <summary>
            Represents the most significant w-r bits. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x80000000.</remarks>
        </member>
        <member name="F:Troschuetz.Random.MT19937Generator.LowerMask">
            <summary>
            Represents the least significant r bits. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x7fffffff.</remarks>
        </member>
        <member name="F:Troschuetz.Random.MT19937Generator.IntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0 when it gets applied to a nonnegative 32-bit signed integer.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.MT19937Generator.UIntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0  when it gets applied to a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.MT19937Generator.mt">
            <summary>
            Stores the state vector array.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.MT19937Generator.mti">
            <summary>
            Stores an index for the state vector array element that will be accessed next.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.MT19937Generator.seed">
            <summary>
            Stores the used seed value.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.MT19937Generator.seedArray">
            <summary>
            Stores the used seed array.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.MT19937Generator.bitBuffer">
            <summary>
            Stores an <see cref="T:System.UInt32"/> used to generate up to 32 random <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.MT19937Generator.bitCount">
            <summary>
            Stores how many random <see cref="T:System.Boolean"/> values still can be generated from <see cref="F:Troschuetz.Random.MT19937Generator.bitBuffer"/>.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.MT19937Generator"/> class, using a time-dependent default 
              seed value.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.MT19937Generator"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number sequence.
            If a negative number is specified, the absolute value of the number is used. 
            </param>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.MT19937Generator"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.MT19937Generator"/> class, using the specified seed array.
            </summary>
            <param name="seedArray">
            An array of numbers used to calculate a starting values for the pseudo-random number sequence.
            If negative numbers are specified, the absolute values of them are used. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="seedArray"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.MT19937Generator"/> class, using the specified seed array.
            </summary>
            <param name="seedArray">
            An array of unsigned numbers used to calculate a starting values for the pseudo-random number sequence.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="seedArray"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.ResetGenerator">
            <summary>
            Resets the <see cref="T:Troschuetz.Random.MT19937Generator"/>, so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.ResetBySeedArray">
            <summary>
            Extends resetting of the <see cref="T:Troschuetz.Random.MT19937Generator"/> using the <see cref="F:Troschuetz.Random.MT19937Generator.seedArray"/>.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.GenerateNUInts">
            <summary>
            Generates <see cref="F:Troschuetz.Random.MT19937Generator.N"/> unsigned random numbers.
            </summary>
            <remarks>
            Generated random numbers are 32-bit unsigned integers greater than or equal to <see cref="F:System.UInt32.MinValue"/> 
              and less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.NextUInt">
            <summary>
            Returns an unsigned random number.
            </summary>
            <returns>
            A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and 
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.NextInclusiveMaxValue">
            <summary>
            Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than or equal to <see cref="F:System.Int32.MaxValue"/>; 
              that is, the range of return values includes 0 and <paramref name="Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.Reset">
            <summary>
            Resets the <see cref="T:Troschuetz.Random.MT19937Generator"/>, so that it produces the same pseudo-random number sequence again.
            </summary>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.Next">
            <summary>
            Returns a nonnegative random number less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <see cref="F:System.Int32.MaxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0.0. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than <paramref name="maxValue"/>; 
              that is, the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> is greater than
              <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            Buffers 32 random bits (1 uint) for future calls, so a new random number is only generated every 32 calls.
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Troschuetz.Random.MT19937Generator.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is a null reference (<see langword="Nothing"/> in Visual Basic). 
            </exception>
        </member>
        <member name="P:Troschuetz.Random.MT19937Generator.CanReset">
            <summary>
            Gets a value indicating whether the <see cref="T:Troschuetz.Random.MT19937Generator"/> can be reset, so that it produces the 
              same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.PoissonDistribution">
            <summary>
            Provides generation of poisson distributed random numbers.
            </summary>
            <remarks>
            The poisson distribution generates only discrete numbers.<br/>
            The implementation of the <see cref="T:Troschuetz.Random.PoissonDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Poisson_distribution">Wikipedia - Poisson distribution</a>
              and the implementation in the <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">
              Communication Networks Class Library</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.PoissonDistribution.lambda">
            <summary>
            Stores the the parameter lambda which is used for generation of poisson distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.PoissonDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of poisson distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.PoissonDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.PoissonDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.PoissonDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.PoissonDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.PoissonDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.PoissonDistribution.IsValidLambda(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.PoissonDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.PoissonDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of beta distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.PoissonDistribution.Next">
            <summary>
            Returns a poisson distributed random number.
            </summary>
            <returns>A poisson distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:Troschuetz.Random.PoissonDistribution.NextDouble">
            <summary>
            Returns a poisson distributed floating point random number.
            </summary>
            <returns>A poisson distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.PoissonDistribution.Lambda">
            <summary>
            Gets or sets the parameter lambda which is used for generation of poisson distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.PoissonDistribution.IsValidLambda(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.PoissonDistribution.Minimum">
            <summary>
            Gets the minimum possible value of poisson distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.PoissonDistribution.Maximum">
            <summary>
            Gets the maximum possible value of poisson distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.PoissonDistribution.Mean">
            <summary>
            Gets the mean value of poisson distributed random numbers. 
            </summary>
        </member>
        <member name="P:Troschuetz.Random.PoissonDistribution.Median">
            <summary>
            Gets the median of poisson distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.PoissonDistribution.Variance">
            <summary>
            Gets the variance of poisson distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.PoissonDistribution.Mode">
            <summary>
            Gets the mode of poisson distributed random numbers. 
            </summary>
        </member>
        <member name="T:Troschuetz.Random.Resources.ExceptionMessages">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Resources.ExceptionMessages.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Resources.ExceptionMessages.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Resources.ExceptionMessages.ArgumentNull">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die {0} is a null reference (Nothing in Visual Basic). ähnelt.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Resources.ExceptionMessages.ArgumentOutOfRangeGreaterEqual">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die {0} must be greater than or equal to {1}. ähnelt.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.Resources.ExceptionMessages.ArgumentRangeLessEqual">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The range between {0} and {1} must be less than or equal to {2}. ähnelt.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.PowerDistribution">
            <summary>
            Provides generation of power distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.PowerDistribution"/> type bases upon information presented on
              <a href="http://www.xycoon.com/power.htm">Xycoon - Power Distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.PowerDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of power distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.PowerDistribution.beta">
            <summary>
            Stores the parameter beta which is used for generation of power distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.PowerDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of power distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.PowerDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.PowerDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.PowerDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.PowerDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.PowerDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.PowerDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.PowerDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.PowerDistribution.IsValidBeta(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.PowerDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.PowerDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of power distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.PowerDistribution.NextDouble">
            <summary>
            Returns a power distributed floating point random number.
            </summary>
            <returns>A power distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.PowerDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of power distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.PowerDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.PowerDistribution.Beta">
            <summary>
            Gets or sets the parameter beta which is used for generation of power distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.PowerDistribution.IsValidBeta(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.PowerDistribution.Minimum">
            <summary>
            Gets the minimum possible value of power distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.PowerDistribution.Maximum">
            <summary>
            Gets the maximum possible value of power distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.PowerDistribution.Mean">
            <summary>
            Gets the mean value of power distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.PowerDistribution.Median">
            <summary>
            Gets the median of power distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.PowerDistribution.Variance">
            <summary>
            Gets the variance of power distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.PowerDistribution.Mode">
            <summary>
            Gets the mode of power distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.ParetoDistribution">
            <summary>
            Provides generation of pareto distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.ParetoDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Pareto_distribution">Wikipedia - Pareto distribution</a> and
              <a href="http://www.xycoon.com/par_random.htm">Xycoon - Pareto Distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.ParetoDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of pareto distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ParetoDistribution.beta">
            <summary>
            Stores the parameter beta which is used for generation of pareto distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ParetoDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of pareto distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.ParetoDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.ParetoDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.ParetoDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ParetoDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.ParetoDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.ParetoDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ParetoDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ParetoDistribution.IsValidBeta(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ParetoDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ParetoDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of pareto distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ParetoDistribution.NextDouble">
            <summary>
            Returns a pareto distributed floating point random number.
            </summary>
            <returns>A pareto distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.ParetoDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of pareto distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.ParetoDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.ParetoDistribution.Beta">
            <summary>
            Gets or sets the parameter beta which is used for generation of pareto distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.ParetoDistribution.IsValidBeta(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.ParetoDistribution.Minimum">
            <summary>
            Gets the minimum possible value of pareto distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ParetoDistribution.Maximum">
            <summary>
            Gets the maximum possible value of pareto distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ParetoDistribution.Mean">
            <summary>
            Gets the mean value of pareto distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ParetoDistribution.Median">
            <summary>
            Gets the median of pareto distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ParetoDistribution.Variance">
            <summary>
            Gets the variance of pareto distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.ParetoDistribution.Mode">
            <summary>
            Gets the mode of pareto distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.GeometricDistribution">
            <summary>
            Provides generation of geometric distributed random numbers.
            </summary>
            <remarks>
            The geometric distribution generates only discrete numbers.<br/>
            The implementation of the <see cref="T:Troschuetz.Random.GeometricDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Geometric_distribution">Wikipedia - Geometric distribution</a>
              and the implementation in the <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">
              Communication Networks Class Library</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.GeometricDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of geometric distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.GeometricDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.GeometricDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.GeometricDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.GeometricDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.GeometricDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.GeometricDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0, and less than or equal to 1.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.GeometricDistribution.Next">
            <summary>
            Returns a geometric distributed random number.
            </summary>
            <returns>A geometric distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:Troschuetz.Random.GeometricDistribution.NextDouble">
            <summary>
            Returns a geometric distributed floating point random number.
            </summary>
            <returns>A geometric distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.GeometricDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of geometric distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.GeometricDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.GeometricDistribution.Minimum">
            <summary>
            Gets the minimum possible value of geometric distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.GeometricDistribution.Maximum">
            <summary>
            Gets the maximum possible value of geometric distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.GeometricDistribution.Mean">
            <summary>
            Gets the mean value of geometric distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.GeometricDistribution.Median">
            <summary>
            Gets the median of geometric distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.GeometricDistribution.Variance">
            <summary>
            Gets the variance of geometric distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.GeometricDistribution.Mode">
            <summary>
            Gets the mode of geometric distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.CauchyDistribution">
            <summary>
            Provides generation of cauchy distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.CauchyDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Cauchy_distribution">Wikipedia - Cauchy distribution</a> and
              <a href="http://www.xycoon.com/cauchy2p_random.htm">Xycoon - Cauchy Distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.CauchyDistribution.alpha">
            <summary>
            Stores the parametera alpha of cauchy distributed random numbers which is used for their generation.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.CauchyDistribution.gamma">
            <summary>
            Stores the parameter gamma which is used for generation of cauchy distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.CauchyDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.CauchyDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator. 
            </summary>
        </member>
        <member name="M:Troschuetz.Random.CauchyDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.CauchyDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.CauchyDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.CauchyDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.CauchyDistribution.IsValidGamma(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.CauchyDistribution.Gamma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.CauchyDistribution.NextDouble">
            <summary>
            Returns a cauchy distributed floating point random number.
            </summary>
            <returns>A cauchy distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.CauchyDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha of cauchy distributed random numbers which is used for their generation.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.CauchyDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.CauchyDistribution.Gamma">
            <summary>
            Gets or sets the parameter gamma which is used for generation of cauchy distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.CauchyDistribution.IsValidGamma(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.CauchyDistribution.Minimum">
            <summary>
            Gets the minimum possible value of cauchy distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.CauchyDistribution.Maximum">
            <summary>
            Gets the maximum possible value of cauchy distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.CauchyDistribution.Mean">
            <summary>
            Gets the mean value of cauchy distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.CauchyDistribution.Median">
            <summary>
            Gets the median of cauchy distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.CauchyDistribution.Variance">
            <summary>
            Gets the variance of cauchy distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.CauchyDistribution.Mode">
            <summary>
            Gets the mode of cauchy distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.FisherTippettDistribution">
            <summary>
            Provides generation of Fisher-Tippett distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.FisherTippettDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Laplace_distribution">Wikipedia - Fisher-Tippett distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.FisherTippettDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of Fisher-Tippett distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.FisherTippettDistribution.mu">
            <summary>
            Stores the parameter mu which is used for generation of Fisher-Tippett distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.FisherTippettDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.FisherTippettDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.FisherTippettDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.FisherTippettDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.FisherTippettDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.FisherTippettDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.FisherTippettDistribution.IsValidMu(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.FisherTippettDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.FisherTippettDistribution.NextDouble">
            <summary>
            Returns a Fisher-Tippett distributed floating point random number.
            </summary>
            <returns>A Fisher-Tippett distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.FisherTippettDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of Fisher-Tippett distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.FisherTippettDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.FisherTippettDistribution.Mu">
            <summary>
            Gets or sets the parameter mu which is used for generation of Fisher-Tippett distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.FisherTippettDistribution.IsValidMu(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.FisherTippettDistribution.Minimum">
            <summary>
            Gets the minimum possible value of Fisher-Tippett distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.FisherTippettDistribution.Maximum">
            <summary>
            Gets the maximum possible value of Fisher-Tippett distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.FisherTippettDistribution.Mean">
            <summary>
            Gets the mean value of Fisher-Tippett distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.FisherTippettDistribution.Median">
            <summary>
            Gets the median of Fisher-Tippett distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.FisherTippettDistribution.Variance">
            <summary>
            Gets the variance of Fisher-Tippett distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.FisherTippettDistribution.Mode">
            <summary>
            Gets the mode of Fisher-Tippett distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.BetaPrimeDistribution">
            <summary>
            Provides generation of beta-prime distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.BetaPrimeDistribution"/> type bases upon information presented on
              <a href="http://www.xycoon.com/ibeta.htm">Xycoon - Inverted Beta Distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.BetaPrimeDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of beta-prime distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.BetaPrimeDistribution.beta">
            <summary>
            Stores the parameter beta which is used for generation of beta-prime distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.BetaPrimeDistribution.betaDistribution">
            <summary>
            Stores a <see cref="T:Troschuetz.Random.BetaDistribution"/> object used for generation of beta-prime distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.BetaPrimeDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.BetaPrimeDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.BetaPrimeDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.BetaPrimeDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.BetaPrimeDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.BetaPrimeDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 1.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.BetaPrimeDistribution.IsValidBeta(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.BetaPrimeDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 1.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.BetaPrimeDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of beta-prime distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.BetaPrimeDistribution.Reset">
            <summary>
            Resets the beta-prime distribution, so that it produces the same random number sequence again.
            </summary>
            <returns>
            <see langword="true"/>, if the beta-prime distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.BetaPrimeDistribution.NextDouble">
            <summary>
            Returns a beta-prime distributed floating point random number.
            </summary>
            <returns>A beta-prime distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.BetaPrimeDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of beta-prime distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.BetaPrimeDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.BetaPrimeDistribution.Beta">
            <summary>
            Gets or sets the parameter beta which is used for generation of beta-prime distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.BetaPrimeDistribution.IsValidBeta(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.BetaPrimeDistribution.Minimum">
            <summary>
            Gets the minimum possible value of beta-prime distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BetaPrimeDistribution.Maximum">
            <summary>
            Gets the maximum possible value of beta-prime distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BetaPrimeDistribution.Mean">
            <summary>
            Gets the mean value of beta-prime distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BetaPrimeDistribution.Median">
            <summary>
            Gets the median of beta-prime distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BetaPrimeDistribution.Variance">
            <summary>
            Gets the variance of beta-prime distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.BetaPrimeDistribution.Mode">
            <summary>
            Gets the mode of beta-prime distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.WeibullDistribution">
            <summary>
            Provides generation of weibull distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.WeibullDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Weibull_distribution">Wikipedia - Weibull distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.WeibullDistribution.LanczosCoefficients">
            <summary>
            Represents coefficients for the Lanczos approximation of the Gamma function.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.WeibullDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of weibull distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.WeibullDistribution.lambda">
            <summary>
            Stores the parameter lambda which is used for generation of erlang distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.WeibullDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of weibull distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.WeibullDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.WeibullDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.WeibullDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.WeibullDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.WeibullDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.WeibullDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.WeibullDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.WeibullDistribution.IsValidLambda(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.WeibullDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.WeibullDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of weibull distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.WeibullDistribution.Gamma(System.Double)">
            <summary>
            Represents a Lanczos approximation of the Gamma function.
            </summary>
            <param name="x">A double-precision floating point number.</param>
            <returns>
            A double-precision floating point number representing an approximation of Gamma(<paramref name="x"/>).
            </returns>
        </member>
        <member name="M:Troschuetz.Random.WeibullDistribution.NextDouble">
            <summary>
            Returns a weibull distributed floating point random number.
            </summary>
            <returns>A weibull distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.WeibullDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of weibull distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.WeibullDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.WeibullDistribution.Lambda">
            <summary>
            Gets or sets the parameter lambda which is used for generation of erlang distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.WeibullDistribution.IsValidLambda(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.WeibullDistribution.Minimum">
            <summary>
            Gets the minimum possible value of weibull distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.WeibullDistribution.Maximum">
            <summary>
            Gets the maximum possible value of weibull distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.WeibullDistribution.Mean">
            <summary>
            Gets the mean value of weibull distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.WeibullDistribution.Median">
            <summary>
            Gets the median of weibull distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.WeibullDistribution.Variance">
            <summary>
            Gets the variance of weibull distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.WeibullDistribution.Mode">
            <summary>
            Gets the mode of weibull distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.GammaDistribution">
            <summary>
            Provides generation of gamma distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.GammaDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Gamma_distribution">Wikipedia - Gamma distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.GammaDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of gamma distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.GammaDistribution.theta">
            <summary>
            Stores the parameter theta which is used for generation of gamma distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.GammaDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of gamma distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.GammaDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.GammaDistribution.helper2">
            <summary>
            Stores an intermediate result for generation of gamma distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:Troschuetz.Random.GammaDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.GammaDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.GammaDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.GammaDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.GammaDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.GammaDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.GammaDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.GammaDistribution.IsValidTheta(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.GammaDistribution.Theta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.GammaDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of gamma distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.GammaDistribution.NextDouble">
            <summary>
            Returns a gamma distributed floating point random number.
            </summary>
            <returns>A gamma distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.GammaDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of gamma distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.GammaDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.GammaDistribution.Theta">
            <summary>
            Gets or sets the parameter theta which is used for generation of gamma distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.GammaDistribution.IsValidTheta(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.GammaDistribution.Minimum">
            <summary>
            Gets the minimum possible value of gamma distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.GammaDistribution.Maximum">
            <summary>
            Gets the maximum possible value of gamma distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.GammaDistribution.Mean">
            <summary>
            Gets the mean value of gamma distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.GammaDistribution.Median">
            <summary>
            Gets the median of gamma distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.GammaDistribution.Variance">
            <summary>
            Gets the variance of gamma distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.GammaDistribution.Mode">
            <summary>
            Gets the mode of gamma distributed random numbers.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.StandardGenerator">
            <summary>
            Represents a simple pseudo-random number generator.
            </summary>
            <remarks>
            The <see cref="T:Troschuetz.Random.StandardGenerator"/> type internally uses an instance of the <see cref="T:System.Random"/> type 
              to generat pseudo-random numbers.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.StandardGenerator.generator">
            <summary>
            Stores an instance of <see cref="T:System.Random"/> type that is used to generate random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.StandardGenerator.seed">
            <summary>
            Stores the used seed value.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.StandardGenerator.bitBuffer">
            <summary>
            Stores an <see cref="T:System.Int32"/> used to generate up to 31 random <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.StandardGenerator.bitCount">
            <summary>
            Stores how many random <see cref="T:System.Boolean"/> values still can be generated from <see cref="F:Troschuetz.Random.StandardGenerator.bitBuffer"/>.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.StandardGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.StandardGenerator"/> class, using a time-dependent default 
              seed value.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.StandardGenerator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.StandardGenerator"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number sequence.
            If a negative number is specified, the absolute value of the number is used. 
            </param>
        </member>
        <member name="M:Troschuetz.Random.StandardGenerator.ResetGenerator">
            <summary>
            Resets the <see cref="T:Troschuetz.Random.StandardGenerator"/>, so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.StandardGenerator.Reset">
            <summary>
            Resets the <see cref="T:Troschuetz.Random.StandardGenerator"/>, so that it produces the same pseudo-random number sequence again.
            </summary>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.StandardGenerator.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.StandardGenerator.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:Troschuetz.Random.StandardGenerator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.StandardGenerator.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.StandardGenerator.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to zero. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to zero, and less than <paramref name="maxValue"/>; 
              that is, the range of return values includes zero but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:Troschuetz.Random.StandardGenerator.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> is greater than
              <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.StandardGenerator.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            Buffers 31 random bits (1 int) for future calls, so a new random number is only generated every 31 calls.
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Troschuetz.Random.StandardGenerator.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to zero, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is a null reference (<see langword="Nothing"/> in Visual Basic). 
            </exception>
        </member>
        <member name="P:Troschuetz.Random.StandardGenerator.CanReset">
            <summary>
            Gets a value indicating whether the <see cref="T:Troschuetz.Random.StandardGenerator"/> can be reset, so that it produces the 
              same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.ALFGenerator">
            <summary>
            Represents a Additive Lagged Fibonacci pseudo-random number generator.
            </summary>
            <remarks>
            The <see cref="T:Troschuetz.Random.ALFGenerator"/> type bases upon the implementation in the 
              <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
            It uses the modulus 2<sup>32</sup> and by default the "lags" 418 and 1279, which can be adjusted through the 
              associated <see cref="P:Troschuetz.Random.ALFGenerator.ShortLag"/> and <see cref="P:Troschuetz.Random.ALFGenerator.LongLag"/> properties. Some popular pairs are presented on 
              <a href="http://en.wikipedia.org/wiki/Lagged_Fibonacci_generator">Wikipedia - Lagged Fibonacci generator</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.ALFGenerator.IntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0 when it gets applied to a nonnegative 32-bit signed integer.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ALFGenerator.UIntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0  when it gets applied to a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ALFGenerator.shortLag">
            <summary>
            Stores the short lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ALFGenerator.longLag">
            <summary>
            Stores the long lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ALFGenerator.x">
            <summary>
            Stores an array of <see cref="F:Troschuetz.Random.ALFGenerator.longLag"/> random numbers
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ALFGenerator.i">
            <summary>
            Stores an index for the random number array element that will be accessed next.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ALFGenerator.seed">
            <summary>
            Stores the used seed value.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ALFGenerator.bitBuffer">
            <summary>
            Stores an <see cref="T:System.UInt32"/> used to generate up to 32 random <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.ALFGenerator.bitCount">
            <summary>
            Stores how many random <see cref="T:System.Boolean"/> values still can be generated from <see cref="F:Troschuetz.Random.ALFGenerator.bitBuffer"/>.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.ALFGenerator"/> class, using a time-dependent default 
              seed value.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.ALFGenerator"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number sequence.
            If a negative number is specified, the absolute value of the number is used. 
            </param>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.StandardGenerator"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.IsValidShortLag(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ALFGenerator.ShortLag"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.IsValidLongLag(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.ALFGenerator.LongLag"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than <see cref="P:Troschuetz.Random.ALFGenerator.ShortLag"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.ResetGenerator">
            <summary>
            Resets the <see cref="T:Troschuetz.Random.ALFGenerator"/>, so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.Fill">
            <summary>
            Fills the array <see cref="F:Troschuetz.Random.ALFGenerator.x"/> with <see cref="F:Troschuetz.Random.ALFGenerator.longLag"/> new unsigned random numbers.
            </summary>
            <remarks>
            Generated random numbers are 32-bit unsigned integers greater than or equal to <see cref="F:System.UInt32.MinValue"/> 
              and less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.NextUInt">
            <summary>
            Returns an unsigned random number.
            </summary>
            <returns>
            A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and 
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.NextInclusiveMaxValue">
            <summary>
            Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than or equal to <see cref="F:System.Int32.MaxValue"/>; 
              that is, the range of return values includes 0 and <paramref name="Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.Reset">
            <summary>
            Resets the <see cref="T:Troschuetz.Random.ALFGenerator"/>, so that it produces the same pseudo-random number sequence again.
            </summary>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.Next">
            <summary>
            Returns a nonnegative random number less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <see cref="F:System.Int32.MaxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0.0. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than <paramref name="maxValue"/>; 
              that is, the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than
              or equal to <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            <remarks>
            Buffers 32 random bits (1 uint) for future calls, so a new random number is only generated every 32 calls.
            </remarks>
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Troschuetz.Random.ALFGenerator.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is a null reference (<see langword="Nothing"/> in Visual Basic). 
            </exception>
        </member>
        <member name="P:Troschuetz.Random.ALFGenerator.ShortLag">
            <summary>
            Gets or sets the short lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.ALFGenerator.IsValidShortLag(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.ALFGenerator.LongLag">
            <summary>
            Gets or sets the long lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.ALFGenerator.IsValidLongLag(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.ALFGenerator.CanReset">
            <summary>
            Gets a value indicating whether the <see cref="T:Troschuetz.Random.ALFGenerator"/> can be reset, so that it produces the 
              same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="T:Troschuetz.Random.LaplaceDistribution">
            <summary>
            Provides generation of laplace distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:Troschuetz.Random.LaplaceDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Laplace_distribution">Wikipedia - Laplace distribution</a>.
            </remarks>
        </member>
        <member name="F:Troschuetz.Random.LaplaceDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of laplace distributed random numbers.
            </summary>
        </member>
        <member name="F:Troschuetz.Random.LaplaceDistribution.mu">
            <summary>
            Stores the parameter mu which is used for generation of laplace distributed random numbers.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.LaplaceDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.LaplaceDistribution"/> class, using a 
              <see cref="T:Troschuetz.Random.StandardGenerator"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:Troschuetz.Random.LaplaceDistribution.#ctor(Troschuetz.Random.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Troschuetz.Random.LaplaceDistribution"/> class, using the specified 
              <see cref="T:Troschuetz.Random.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:Troschuetz.Random.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:Troschuetz.Random.LaplaceDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.LaplaceDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Troschuetz.Random.LaplaceDistribution.IsValidMu(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:Troschuetz.Random.LaplaceDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:Troschuetz.Random.LaplaceDistribution.NextDouble">
            <summary>
            Returns a laplace distributed floating point random number.
            </summary>
            <returns>A laplace distributed double-precision floating point number.</returns>
        </member>
        <member name="P:Troschuetz.Random.LaplaceDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of laplace distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.LaplaceDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.LaplaceDistribution.Mu">
            <summary>
            Gets or sets the parameter mu which is used for generation of laplace distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:Troschuetz.Random.LaplaceDistribution.IsValidMu(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:Troschuetz.Random.LaplaceDistribution.Minimum">
            <summary>
            Gets the minimum possible value of laplace distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.LaplaceDistribution.Maximum">
            <summary>
            Gets the maximum possible value of laplace distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.LaplaceDistribution.Mean">
            <summary>
            Gets the mean value of laplace distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.LaplaceDistribution.Median">
            <summary>
            Gets the median of laplace distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.LaplaceDistribution.Variance">
            <summary>
            Gets the variance of laplace distributed random numbers.
            </summary>
        </member>
        <member name="P:Troschuetz.Random.LaplaceDistribution.Mode">
            <summary>
            Gets the mode of laplace distributed random numbers.
            </summary>
        </member>
    </members>
</doc>
